import pytest
from oval_lib import JSONPkgGenerator, Package, CVE, USN
from datetime import datetime

def generate_mock_cve(pkgs, cve_id='CVE-0001-0001',
                       description='test',
                       priority='medium',
                       public_date='2020-08-04 17:00:00 UTC',
                       cvss = [{
                           'baseScore': '8.8',
                           'vector': '3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H',
                           'baseSeverity': 'HIGH'
                           }],
                        assigned_to='foo',
                        discovered_by='johndoe',
                        notes=[
                            ('test', 'note'),
                            ('test2', 'note2')
                            ],
                        mitigation='test',
                        references= 'http://example.com\nhttp://example2.com\n',
                        bugs='http://bug1.com\nhttp://bug2.com\n',
                        usns=[]
                        ):
    cve = CVE(
            number=cve_id,
            info={
                'Description': description,
                'Priority': [priority],
                'PublicDate': public_date,
                'CVSS': cvss,
                'Assigned-to': assigned_to,
                'Discovered-by': discovered_by,
                'Notes': notes,
                'Mitigation': mitigation,
                'References': references,
                'Bugs': bugs
            }
        )

    for pkg, info in pkgs.items():
        cve.add_pkg(pkg, info['release'], info['state'], info['note'])

    for usn in usns:
        cve.usns.append(usn)

    return cve

def generate_mock_pkg(version_binaries,
                      pkgname='foo',
                      rel='jammy',
                      component='main',
                      ):
    pkg = Package(pkgname, rel, version_binaries)
    pkg.section = component

    return pkg

def generate_mock_usn(description=None, releases=None, title=None, timestamp=None, summary=None, action=None, id=None, isummary=None, cve_objs={}, pkgs_by_rel={}, lp_bugs=[]):
    default_values = {
        'description': 'Default Description',
        'releases': ['jammy'],
        'title': 'Default Title',
        'timestamp': datetime.now().isoformat(timespec="seconds"),
        'summary': 'Default Summary',
        'action': 'Default Action',
        'id': 'UNS-0001-1',
        'isummary': 'Default ISummary'
    }

    # Update default values with provided values
    default_values.update({
        k: v for k, v in locals().items() if k in default_values and v is not None
    })

    # Create and return instance of MyClass with provided or default values
    return USN(default_values, cve_objs, pkgs_by_rel, lp_bugs)


def generate_version_binaries(source_depth, binaries, different_binary_versions=False, esm=False):
    """
    "0ad": {
    "0.0.25b-1": {
      "binaries": {
        "0ad": {
          "arch": [
            "amd64",
            "arm64",
            "armhf"
          ],
          "component": "universe",
          "version": "0.0.25b-1"
        },
        "0ad-dbgsym": {
          "arch": [
            "amd64",
            "arm64",
            "armhf"
          ],
          "component": "universe",
          "version": "0.0.25b-1"
        }
      },
      "component": "universe",
      "pocket": "Release"
    },

    """
    version_binaries = {}
    for base_source_version in range(source_depth):
        source_version = str(base_source_version)
        if esm:
            source_version = source_version + '+' + 'esm1'

        version_binaries[source_version] = {}
        for binary_version in range(len(binaries)):
            binary_version_modifier = 1
            version = str(binary_version)
            if different_binary_versions:
                version = version + '+' + str(binary_version_modifier)
                binary_version_modifier += 1
            if esm:
                version = version + '+' + 'esm1'
            version_binaries[source_version][version] = []
            version_binaries[source_version][version].append(binaries[binary_version])

    return version_binaries


class EmptyJSONPkgGenerator(JSONPkgGenerator):
    def __init__(self, releases = ['jammy']) -> None:
        self.releases = releases
        self.pkg_cache = None
        self.expand = True
        pass
#### TESTS ####

@pytest.mark.parametrize("mock_cve", [
    generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001'),
    generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0002', public_date='2020-08-04 17:00:00 UTC'),
    generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0003', public_date='2020-08-04', usns=[generate_mock_usn(id='1-1')], priority='critical'),
    generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0004', cvss=None, priority='low', usns=[generate_mock_usn(id='2-1'), generate_mock_usn(id='1-1')])
])
def test_generate_cve_info(mock_cve):
    json_gen = EmptyJSONPkgGenerator()
    json_gen.release = 'jammy'
    json_gen.parent_releases = []

    package1 = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ), pkgname='pkg1')

    package2 = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ), pkgname='pkg2')

    mock_cve.add_pkg(package1, 'jammy', 'needs-triage', '')
    mock_cve.add_pkg(package2, 'jammy', 'released', '1.0.0')

    generated_info = json_gen._generate_cve_info(mock_cve)

    for format in ['%Y-%m-%d %H:%M:%S %Z', '%Y-%m-%d']:
        try:
            date = datetime.strptime(mock_cve.public_date, format)
            break
        except ValueError:
            pass

    assert generated_info['description'] == mock_cve.description.strip()
    assert generated_info['published_at'] == date.isoformat(timespec="seconds")

    notes = []
    for note in mock_cve.notes:
        notes.append(f"{note[0]}> {note[1]}")

    assert generated_info['notes'] == notes
    assert generated_info['mitigation'] == mock_cve.mitigation
    assert generated_info['cvss_severity'] == (mock_cve.cvss[0]['baseSeverity'].lower() if mock_cve.cvss else None)
    assert generated_info['cvss_score'] == (float(mock_cve.cvss[0]['baseScore']) if mock_cve.cvss else None)
    assert generated_info['ubuntu_priority'] == mock_cve.priority
    assert generated_info['related_packages'] == ['pkg1', 'pkg2']

    for usn in mock_cve.usns:
        assert f'USN-{usn.id}' in generated_info['related_usns']


def test_generate_cves_info():
    cves = {
        'CVE-0001-0001': generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001'),
        'CVE-0001-0002': generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0002', public_date='2020-08-04 17:00:00 UTC'),
        'CVE-0001-0003': generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0003', public_date='2020-08-04'),
        'CVE-0001-0004': generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0004', cvss=None)
    }

    json_gen = EmptyJSONPkgGenerator()
    json_gen.cves = {'jammy': {}}

    for cve_id, cve in cves.items():
        json_gen.cves['jammy'][cve_id] = cve

    json_gen._init_ids('jammy')
    generated_info_cves = json_gen._generate_cves_info()

    assert len(generated_info_cves) == 4

    for cve_id, generated_info in generated_info_cves.items():
        mock_cve = cves[cve_id]
        date = None
        for format in ['%Y-%m-%d %H:%M:%S %Z', '%Y-%m-%d']:
            try:
                date = datetime.strptime(mock_cve.public_date, format)
                break
            except ValueError:
                pass

        notes = []
        for note in mock_cve.notes:
            notes.append(f"{note[0]}> {note[1]}")

        assert generated_info['description'] == mock_cve.description.strip()
        assert generated_info['published_at'] == date.isoformat(timespec="seconds")
        assert generated_info['notes'] == notes
        assert generated_info['mitigation'] == mock_cve.mitigation
        assert generated_info['cvss_severity'] == (mock_cve.cvss[0]['baseSeverity'].lower() if mock_cve.cvss else None)
        assert generated_info['cvss_score'] == (float
        (mock_cve.cvss[0]['baseScore']) if mock_cve.cvss else None)

@pytest.mark.parametrize("status,note,json_status,fixed_version", [
    ("ignored", "not for us", "vulnerable", None),
    ("needed", "", "vulnerable", None),
    ("needs-triage", "", "vulnerable", None),
    ("deferred", "1-2-3", "vulnerable", None),
    ("not-affected", "code not present", "not-vulnerable", None),
    ("not-affected", "1.2.3", "not-vulnerable", None),
    ("released", "1.2.3", "fixed", "1.2.3"),
])
def test_generate_cve_pkg_info(status, note, json_status, fixed_version):
    package = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ))

    cve = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001', priority='critical')
    cve.add_pkg(package, 'jammy', status, note)
    json_gen = EmptyJSONPkgGenerator()
    json_gen._init_ids('jammy')

    info = json_gen._generate_cve_pkg_info(package)
    info = info['CVE-0001-0001']

    assert info['source_fixed_version'] == fixed_version
    assert info['status'] == json_status

def test_generate_cve_pkg_info_parents():
    package = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ), rel='bionic')

    cve = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001', priority='critical')
    cve.add_pkg(package, 'bionic', 'not-affected', '')

    json_gen = EmptyJSONPkgGenerator()
    json_gen._init_ids('bionic')

    info = json_gen._generate_cve_pkg_info(package)
    info = info['CVE-0001-0001']
    assert info['status'] == 'not-vulnerable'

    cve.add_pkg(package, 'esm-infra/bionic', 'needs-triage', '')
    json_gen._init_ids('esm-infra/bionic')

    info = json_gen._generate_cve_pkg_info(package)
    info = info['CVE-0001-0001']
    assert info['status'] == 'vulnerable'

    cve.add_pkg(package, 'esm-apps/bionic', 'dne', '')
    json_gen._init_ids('esm-apps/bionic')

    info = json_gen._generate_cve_pkg_info(package)
    info = info['CVE-0001-0001']
    assert info['status'] == 'not-applicable'


@pytest.mark.parametrize("usn", [
    generate_mock_usn(
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy':{'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy':{}},
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy':{'CVE-0001-0001': None, 'CVE-0001-0002': None}},
    ),
])
def test_generate_usn_info(usn):
    # 1708590783 is ~2024-02-22T09:33:03+00:00
    date = datetime.fromtimestamp(1708590783).isoformat(timespec="seconds")
    json_gen = EmptyJSONPkgGenerator()
    json_gen._init_ids('jammy')

    info = json_gen._generate_usn_info(usn)
    assert info['title'] == usn.title
    assert info['description'] == usn.description
    assert info['published_at'] == date
    assert info['related_cves'] == list(usn.cves['jammy'].keys())
    assert info['related_launchpad_bugs'] == usn.lp_bugs

def test_generate_usns_info():
    date = datetime.fromtimestamp(1708590783).isoformat(timespec="seconds")

    usns = [generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy':{'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        id='1000-2',
        description='this is a test description',
        timestamp=1708590783,
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        id='1000-3',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy':{'CVE-0001-0001': None, 'CVE-0001-0002': None}},
    )]

    wrong_release_usn = generate_mock_usn(
        id='2000-1',
        description='this is a test description',
        timestamp=1708590783,
        releases=['bionic'],
        cve_objs={'bionic':{'CVE-0001-0001': None, 'CVE-0001-0002': None}},
    )

    other_release = generate_mock_usn(
        id='3000-1',
        description='this is a test description',
        timestamp=1708590783,
        releases=['jammy', 'bionic'],
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}, 'bionic': {'CVE-0001-0003'}}
    )

    final_usns  = usns.copy()
    final_usns.append(wrong_release_usn)
    final_usns.append(other_release)
    usns_dict = dict(map(lambda usn: (usn.id, usn), final_usns))
    json_gen = EmptyJSONPkgGenerator()
    json_gen.usns = usns_dict
    json_gen._init_ids('jammy')
    info = json_gen._generate_usns_info()

    assert 'USN-2000-1' not in info
    assert 'USN-3000-1' in info and 'CVE-0001-0003' not in info['USN-3000-1']['related_cves']

    for usn in usns:
        assert f'USN-{usn.id}' in info
        assert info[f'USN-{usn.id}']['description'] == usn.description
        assert info[f'USN-{usn.id}']['published_at'] == date
        if 'jammy' in usn.cves:
            assert info[f'USN-{usn.id}']['related_cves'] == list(usn.cves['jammy'].keys())
        else:
            assert info[f'USN-{usn.id}']['related_cves'] == []
        assert info[f'USN-{usn.id}']['related_launchpad_bugs'] == usn.lp_bugs


def test_generate_usns_info_parents():
    jammy_usns = [generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        id='1000-2',
        description='this is a test description',
        timestamp=1708590783,
        lp_bugs=['http://bug1.com', 'http://bug2.com']
    ),
    generate_mock_usn(
        id='1000-3',
        description='this is a test description',
        timestamp=1708590783,
        releases=['jammy'],
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}, 'bionic': {'CVE-0001-0003'}}
    )]

    jammy_infra_usns = [
        generate_mock_usn(
            id='2000-1',
            description='this is a test description',
            timestamp=1708590783,
            releases=['jammy'],
            cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}, 'bionic': {'CVE-0001-0003'}}
        )
    ]

    jammy_apps_usns = [
        generate_mock_usn(
            id='3000-1',
            description='this is a test description',
            timestamp=1708590783,
            releases=['jammy'],
            cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}, 'bionic': {'CVE-0001-0003'}}
        )
    ]

    final_usns  = jammy_usns + jammy_infra_usns + jammy_apps_usns
    usns_dict = dict(map(lambda usn: (usn.id, usn), final_usns))
    json_gen = EmptyJSONPkgGenerator()
    json_gen.usns = usns_dict
    json_gen._init_ids('jammy')
    info = json_gen._generate_usns_info()
    assert len(info.keys()) == 5
    for usn in jammy_usns:
        assert f'USN-{usn.id}' in info

def test_generate_usn_pkg_info():
    releases_1 = {
        'jammy': {
            'sources': {
                'foo': {
                    'version': '1.0.0'
                }
            }
        }
    }

    releases_2 = {
        'jammy': {
            'sources': {
                'foo': {
                    'version': '2.0.0'
                }
            }
        }
    }

    pkg = generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    ))

    pkg_not = generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    ), rel='bionic')

    usn = generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'foo': (pkg, '1.0.0')}},
        releases=releases_1
    )

    usn_regression = generate_mock_usn(
        id='1000-2',
        title='Regression',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'foo': (pkg, '2.0.0')}},
        releases=releases_2
    )

    json_gen = EmptyJSONPkgGenerator()
    json_gen._init_ids('jammy')

    usns_dict = dict(map(lambda usn: (usn.id, usn), [usn, usn_regression]))
    json_gen.usns = usns_dict

    usn_info, usn_reg_info = json_gen._generate_usn_pkg_info(pkg)

    assert 'USN-1000-1' in usn_info
    assert 'USN-1000-2' in usn_reg_info
    assert 'USN-1000-1' not in usn_reg_info
    assert 'USN-1000-2' not in usn_info

    assert usn_info['USN-1000-1']['source_fixed_version'] == '1.0.0'
    assert usn_reg_info['USN-1000-2']['source_fixed_version'] == '2.0.0'

    json_gen._init_ids('bionic')
    usn_info, usn_reg_info = json_gen._generate_usn_pkg_info(pkg_not)

    assert 'USN-1000-1' not in usn_info
    assert 'USN-1000-2' not in usn_reg_info
    assert 'USN-1000-1' not in usn_reg_info
    assert 'USN-1000-2' not in usn_info


@pytest.mark.parametrize("package,pocket", [
    (generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    )), "security"),
    (generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo'], different_binary_versions=True
    )), "release"),
    (generate_mock_pkg(generate_version_binaries(
        3, ['bar', 'foo'], esm=True,
    )), "esm-infra"),
    (generate_mock_pkg(generate_version_binaries(
        4, ['bar', 'foo'], esm=True
    ), component='universe'), "esm-apps"),
])
def test_generate_package_source_info(mocker, package, pocket):
    mocker.patch('oval_lib.get_pocket', return_value=('',pocket))
    json_gen = EmptyJSONPkgGenerator()
    info = dict()
    json_gen._generate_package_source_info(package, info)

    for source_version in package.versions_binaries:
        assert source_version in info
        for binary_version in package.versions_binaries[source_version]:
            for binary in package.versions_binaries[source_version][binary_version]:
                assert binary in info[source_version]['binary_packages']
                assert info[source_version]['binary_packages'][binary] == binary_version

        assert info[source_version]['pocket'] == pocket

def test_generate_package_info(mocker):
    mocker.patch('oval_lib.get_pocket', return_value=('','release'))

    releases_1 = {
        'jammy': {
            'sources': {
                'foo': {
                    'version': '1.0.0'
                }
            }
        }
    }

    releases_2 = {
        'bionic': {
            'sources': {
                'bar': {
                    'version': '2.0.0'
                }
            }
        }
    }

    pkg = generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    ))

    pkg2 = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ), rel='bionic', pkgname='bar')

    usn = generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'foo': (pkg, '1.0.0')}},
        releases=releases_1
    )

    usn_regression = generate_mock_usn(
        id='1000-2',
        title='A regression',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'bionic': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'bionic': {'bar': (pkg2, '2.0.0')}},
        releases=releases_2
    )


    cve = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001', priority='critical')
    cve2 = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0002', priority='medium')

    cve.add_pkg(pkg, 'jammy', 'needed', '')
    cve2.add_pkg(pkg2, 'bionic', 'not-affected', '1')
    json_gen = EmptyJSONPkgGenerator()
    usns_dict = dict(map(lambda usn: (usn.id, usn), [usn, usn_regression]))
    json_gen.usns = usns_dict
    json_gen.cves = dict()
    json_gen.cves['CVE-0001-0001'] = cve
    json_gen.cves['CVE-0001-0002'] = cve2

    json_gen.packages = {}
    json_gen.packages['jammy'] = {
        'foo': pkg
    }

    json_gen.packages['bionic'] = {
        'bar': pkg2
    }

    json_gen._init_ids('jammy')
    info = json_gen._generate_package_info(pkg)
    assert '0' in info['source_versions']
    assert 'USN-1000-1' in info['ubuntu_security_notices']
    assert len(info['ubuntu_security_notices_regressions']) == 0
    assert 'CVE-0001-0001' in info['cves']
    assert 'CVE-0001-0002' not in info['cves']

    json_gen._init_ids('bionic')
    info = json_gen._generate_package_info(pkg2)
    assert '0' in info['source_versions']
    assert 'USN-1000-2' in info['ubuntu_security_notices_regressions']
    assert len(info['ubuntu_security_notices']) == 0
    assert 'CVE-0001-0002' in info['cves']
    assert 'CVE-0001-0001' not in info['cves']

def test_generate_packages_info(mocker):
    mocker.patch('oval_lib.get_pocket', return_value=('','release'))

    releases_1 = {
        'jammy': {
            'sources': {
                'foo': {
                    'version': '1.0.0'
                }
            }
        }
    }

    releases_2 = {
        'bionic': {
            'sources': {
                'bar': {
                    'version': '2.0.0'
                }
            }
        }
    }

    pkg = generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    ))

    pkg2 = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'foo']
    ), rel='bionic', pkgname='bar')

    usn = generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'foo': (pkg, '1.0.0')}},
        releases=releases_1
    )

    usn_regression = generate_mock_usn(
        id='1000-2',
        title='Regression',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'bionic': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'bionic': {'bar': (pkg2, '2.0.0')}},
        releases=releases_2
    )


    cve = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001', priority='critical')
    cve2 = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0002', priority='medium')

    cve.add_pkg(pkg, 'jammy', 'needed', '')
    cve2.add_pkg(pkg2, 'bionic', 'not-affected', '1')
    json_gen = EmptyJSONPkgGenerator()
    usns_dict = dict(map(lambda usn: (usn.id, usn), [usn, usn_regression]))
    json_gen.usns = usns_dict
    json_gen.cves = dict()
    json_gen.cves['CVE-0001-0001'] = cve
    json_gen.cves['CVE-0001-0002'] = cve2
    json_gen.packages = {
        'jammy': {
            'foo': pkg
        },
        'bionic': {
            'bar': pkg2
        }
    }

    json_gen._init_ids('jammy')
    info = json_gen._generate_packages_info()
    assert 'foo' in info
    assert 'bar' not in info

    json_gen._init_ids('bionic')
    info = json_gen._generate_packages_info()
    assert 'foo' not in info
    assert 'bar' in info

def test_generate_packages_info_parents(mocker):
    mocker.patch('oval_lib.get_pocket', return_value=('','release'))

    releases_jammy = {
        'jammy': {
            'sources': {
                'foo': {
                    'version': '1.0.0'
                }
            }
        }
    }

    releases_infra_jammy = {
        'jammy': {
            'sources': {
                'bar': {
                    'version': '2.0.0'
                }
            }
        }
    }

    releases_apps_jammy = {
        'jammy': {
            'sources': {
                'dodo': {
                    'version': '3.0.0'
                }
            }
        }
    }

    pkg = generate_mock_pkg(generate_version_binaries(
        1, ['bar', 'foo']
    ))

    pkg2 = generate_mock_pkg(generate_version_binaries(
        2, ['bar', 'fofa']
    ), rel='esm-infra/jammy', pkgname='bar')


    pkg3 = generate_mock_pkg(generate_version_binaries(
        2, ['dodo', 'foo']
    ), rel='esm-apps/jammy', pkgname='dodo')

    pkg4 = generate_mock_pkg(generate_version_binaries(
        3, ['bar', 'foo']
    ), rel='esm-apps/jammy')


    usn = generate_mock_usn(
        id='1000-1',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'foo': (pkg, '1.0.0')}},
        releases=releases_jammy
    )

    usn_infra = generate_mock_usn(
        id='2000-1',
        title='Infra',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'bar': (pkg2, '2.0.0')}},
        releases=releases_infra_jammy
    )

    usn_apps = generate_mock_usn(
        id='3000-1',
        title='Apps',
        description='this is a test description',
        timestamp=1708590783,
        cve_objs={'jammy': {'CVE-0001-0001': None, 'CVE-0001-0002': None}},
        lp_bugs=['http://bug1.com', 'http://bug2.com'],
        pkgs_by_rel={'jammy': {'dodo': (pkg3, '3.0.0')}},
        releases=releases_apps_jammy
    )

    cve = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0001', priority='critical')
    cve2 = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0002', priority='medium')
    cve3 = generate_mock_cve(pkgs=dict(), cve_id='CVE-0001-0003', priority='medium')

    cve.add_pkg(pkg, 'jammy', 'needed', '')
    cve.add_pkg(pkg4, 'esm-apps/jammy', 'not-affected', '4')
    cve2.add_pkg(pkg2, 'esm-infra/jammy', 'not-affected', '1')
    cve3.add_pkg(pkg3, 'esm-apps/jammy', 'released', '2')

    json_gen = EmptyJSONPkgGenerator()
    usns_dict = dict(map(lambda usn: (usn.id, usn), [usn, usn_infra, usn_apps]))
    json_gen.usns = usns_dict
    json_gen.cves = {'jammy': {}}
    json_gen.cves['jammy']['CVE-0001-0001'] = cve
    json_gen.cves['jammy']['CVE-0001-0002'] = cve2
    json_gen.cves['jammy']['CVE-0001-0003'] = cve3

    json_gen.packages = {
        'jammy': {
            'foo': pkg
        },
        'esm-infra/jammy': {
            'bar': pkg2
        },
        'esm-apps/jammy': {
            'dodo': pkg3,
            'foo': pkg4
        }
    }

    json_gen._init_ids('esm-infra/jammy')
    json_gen.parent_releases = ['esm-apps/jammy', 'jammy']
    json_gen.orig_parent = 'jammy'

    info = json_gen._generate_packages_info()
    assert 'foo' in info
    assert 'bar' in info
    assert 'dodo' in info
    assert info['foo']['cves']['CVE-0001-0001']['status'] == 'not-vulnerable'
    assert info['bar']['cves']['CVE-0001-0002']['status'] == 'not-vulnerable'
    assert info['dodo']['cves']['CVE-0001-0003']['status'] == 'fixed'
    assert info['foo']['cves']['CVE-0001-0001']['source_fixed_version'] == None
    assert info['bar']['cves']['CVE-0001-0002']['source_fixed_version'] == None
    assert info['dodo']['cves']['CVE-0001-0003']['source_fixed_version'] == '2'
    assert info['foo']['ubuntu_security_notices']['USN-1000-1']['source_fixed_version'] == '1.0.0'
    assert info['bar']['ubuntu_security_notices']['USN-2000-1']['source_fixed_version'] == '2.0.0'
    assert info['dodo']['ubuntu_security_notices']['USN-3000-1']['source_fixed_version'] == '3.0.0'


@pytest.mark.parametrize("expand,release,filename", [
    (False, 'esm-apps/bionic', 'com.ubuntu.bionic.pkg.json'),
    (True, 'esm-apps/bionic', 'com.ubuntu.esm-apps_bionic.pkg.json'),
    (False, 'esm-infra/bionic', 'com.ubuntu.bionic.pkg.json'),
    (True, 'esm-infra/bionic', 'com.ubuntu.esm-infra_bionic.pkg.json'),
    (False, 'bionic', 'com.ubuntu.bionic.pkg.json'),
    (True, 'bionic', 'com.ubuntu.bionic.pkg.json')
])
def test_expand(expand, release, filename):
    json_gen = EmptyJSONPkgGenerator()
    json_gen.expand = expand
    json_gen._init_ids(release)

    assert json_gen.output_file == filename
