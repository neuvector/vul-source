#!/usr/bin/env python3
# Main script to trigger data generation
#
# Author: Eduardo Barretto <eduardo.barretto@canonical.com>
# Copyright (C) 2024 Canonical, Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# TODO: improve arguments, perhaps nest arguments (e.g. osv cve)

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from datalib import (
    ReleaseStorage, UCTCVEStorage, UCTPackageStorage,
    LSNStorage, USNStorage
)
from data_generation.osv_lib import cve2osv, lsn2osv, usn2osv
from data_generation.vex_lib import generate_vex_document
from data_generation.utils import (
    get_changed_cves, get_changed_usns, get_changed_lsns,
    read_last_commit_hash, write_current_commit_hash
)
from datetime import datetime

import logging

logger = logging.getLogger(__name__)

def set_logger(level):
    now = datetime.now()
    timenow = now.strftime("%Y-%m-%d-%H:%M:%S")

    if level == "DEBUG":
        lvl = logging.DEBUG
    elif level == "INFO":
        lvl = logging.INFO
    elif level == "WARNING":
        lvl = logging.WARNING
    elif level == "ERROR":
        lvl = logging.ERROR
    elif level == "CRITICAL":
        lvl = logging.CRITICAL

    logging.basicConfig(filename=f"/tmp/data-generation-{timenow}.log", level=lvl)
    logger.warning(f"Setting debug level to {level}")


def load_input_data(data_type):
    supported_releases = {
        'osv': [],
        'vex': [],
    }
    releases = []

    release_storage = ReleaseStorage()
    gen_data_releases = release_storage.gen_data_releases

    cve_storage = UCTCVEStorage()
    cve_storage.link_release_storage(release_storage)
    cve_storage.load()

    package_storage = UCTPackageStorage()
    package_storage.link_release_storage(release_storage)
    if data_type == 'osv' or data_type == 'all':
        supported_releases['osv'] = gen_data_releases['osv']
        releases = releases + gen_data_releases['osv']
    if data_type == 'vex' or data_type == 'all':
        supported_releases['vex'] = gen_data_releases['vex']
        releases = releases + gen_data_releases['vex']
    if data_type == 'json-pkg' or data_type == 'all':
        supported_releases['json-pkg'] = gen_data_releases['json-pkg']
        releases = releases + gen_data_releases['json-pkg']
    package_storage.load(filter_releases=sorted(set(releases)))

    usn_storage = USNStorage()
    usn_storage.link_release_storage(release_storage)
    usn_storage.load()

    lsn_storage = LSNStorage()
    lsn_storage.link_release_storage(release_storage)
    lsn_storage.load()

    cve_storage.link_pkg_storage(package_storage)
    usn_storage.link_pkg_storage(package_storage)
    usn_storage.link_cve_storage(cve_storage)
    lsn_storage.link_pkg_storage(package_storage)
    lsn_storage.link_cve_storage(cve_storage)

    return cve_storage, package_storage, usn_storage, lsn_storage, release_storage, supported_releases


def parse_options():
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "-d",
        "--debug-level",
        default="error",
        choices=["debug", "info", "warning", "error", "critical"],
        help="Define debug level",
    )
    parser.add_argument(
        "--type",
        required=True,
        default="all",
        choices=["json-pkg", "osv", "vex", "oval", "all"],
        help="Define what type of data to generate",
    )
    parser.add_argument(
        "--product",
        required=False,
        default="all",
        choices=["ubuntu", "other", "all"],
        help="Define what products the data should be generated for",
    )
    parser.add_argument(
        "--range",
        default="all",
        choices=["latest", "all"],
        help="Define what range of data should be generated, for the supported types (VEX and OSV)",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        action="store",
        default=None,
        required=True,
        help="Directory to store generated files",
    )
    parser.add_argument(
        "-p",
        "--previous-dir",
        action="store",
        default=None,
        required=False,
        help="Directory where previous files are stored",
    )
    parser.add_argument(
        "--cves",
        nargs="+",
        default=None,
        help="Space separated list of CVE ids"
    )
    parser.add_argument(
        "--usns",
        nargs="+",
        default=None,
        help="Space separated list of USN ids"
    )
    parser.add_argument(
        "--lsns",
        nargs="+",
        default=None,
        help="Space separated list of LSN ids"
    )
    parser.add_argument(
        "--releases",
        nargs="+",
        default=None,
        help="Space separated list of Ubuntu releases",
    )
    parser.add_argument(
        "--packages",
        nargs="+",
        default=None,
        help="Space separated list of source packages",
    )
    options = parser.parse_args()

    return options


def main():
    options = parse_options()

    set_logger(options.debug_level.upper())

    cve_info, pkg_info, usn_info, lsn_info, release_info, supported_releases = load_input_data(options.type)

    if options.range == 'all':
        # OSV generation
        if options.type == 'osv' or options.type == 'all':
            for usn in usn_info.sns:
                logger.debug(f"Generating OSV data for USN-{usn}")
                usn2osv(options.output_dir, usn_info.get_usn(usn))

            for lsn in lsn_info.sns:
                logger.debug(f"Generating OSV data for {lsn}")
                lsn2osv(options.output_dir, lsn_info.get_lsn(lsn))

            for cve in cve_info.cves:
                logger.debug(f"Generating OSV data for {cve}")
                cve2osv(options.output_dir, cve_info.get_cve(cve), supported_releases)

        # VEX generation
        if options.type == 'vex' or options.type == 'all':
            for cve in cve_info.cves:
                # get the CVE and generate the relevant VEX data
                logger.debug(f"Generating VEX data for {cve}")
                if cve_info.get_cve(cve):
                    generate_vex_document(options.output_dir, "cve", cve_info.get_cve(cve), supported_releases)

            # generate usn vex data for ubuntu products (only those supported for now)
            for usn in usn_info.sns:
                # get the USN and generate the relevant VEX data
                logger.debug(f"Generating VEX data for USN-{usn}")
                generate_vex_document(options.output_dir, "usn", usn_info.get_usn(usn))

    elif options.range == 'latest':
        # OSV generation
        if options.type == 'osv' or options.type == 'all':
            # generate OSV data for the changed USN files
            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("USN")
            usns_changed = get_changed_usns(commit_hash)
            for usn in usns_changed:
                logger.debug(f"Generating OSV data for USN-{usn}")
                usn2osv(options.output_dir, usn_info.get_usn(usn))

            # generate OSV data for the changed LSN files
            commit_hash = read_last_commit_hash("LSN")
            lsns_changed = get_changed_lsns(commit_hash)
            for lsn in lsns_changed:
                logger.debug(f"Generating OSV data for {lsn}")
                lsn2osv(options.output_dir, lsn_info.get_lsn(lsn))

            # generate OSV data for the changed CVE files
            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("UCT")
            cves_changed = get_changed_cves(commit_hash)
            commit_hash = read_last_commit_hash("SUBPROJECTS")
            cves_changed.update(get_changed_cves(commit_hash, ubuntu=False))
            for cve in cves_changed:
                if cve not in cve_info.cves:
                    continue
                cve_info.load_cve(cve)
                logger.debug(f"Generating OSV data for {cve}")
                cve2osv(options.output_dir, cve_info.get_cve(cve), supported_releases)


        # VEX generation
        if options.type == 'vex' or options.type == 'all':
            # generate VEX data for the changed CVE files
            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("UCT")
            cves_changed = get_changed_cves(commit_hash)
            commit_hash = read_last_commit_hash("SUBPROJECTS")
            cves_changed.update(get_changed_cves(commit_hash, ubuntu=False))
            # generate the vex documents
            for cve in cves_changed:
                logger.debug(f"Generating VEX data for {cve}")
                cve_info.load_cve(cve)
                if cve_info.get_cve(cve):
                    generate_vex_document(options.output_dir, "cve", cve_info.get_cve(cve), supported_releases)

            # generate VEX data for the changed USN files
            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("USN")
            usns_changed = get_changed_usns(commit_hash)
            for usn in usns_changed:
                logger.debug(f"Generating VEX data for USN-{usn}")
                generate_vex_document(options.output_dir, "usn", usn_info.get_usn(usn))

    # update the commit cache with the current one, as data
    # was just generated
    write_current_commit_hash("UCT")
    write_current_commit_hash("SUBPROJECTS")
    write_current_commit_hash("USN")
    write_current_commit_hash("LSN")

    return 0


if __name__ == "__main__":
    exit(main())
