#!/usr/bin/python3
#
# Copyright 2020, 2021 Canonical LTD
# Authors:
#  Mike Salvatore <mike.salvatore@canonical.com>
#  Steve Beattie <steve.beattie@canonical.com>
#
# This script is for adding, updating, and validating release
# information on the ubuntu.com/security/ USN and CVE tracker website.
#
# To add a new release, add an entry in the table below with the correct
# information for that release and do:
#   $ scripts/post-release-to-web-cve-tracker.py --action add RELEASE
# if you pass the -d option, the script will make no changes and dump
# out the json information that would have been submitted.
#
# To update a release, adjust the information for that release in the
# releases table, and then perform:
#   $ scripts/post-release-to-web-cve-tracker.py --action update RELEASE
# -d / --debug does the same thing here
#
# The validate action will compare the information in the table with the
# information on the website to ensure that they are consistent. 'all'
# can be passed for the release name to validate all the releases in the
# table, like so:
#   $ scripts/post-release-to-web-cve-tracker.py --action validate all
# One thing to watch out for is that there is a proxy in front of the
# website, so after making changes with 'add' or 'update', it may take a
# few minutes for the proxy to notice, and thus attempts to validate
# changes will fail.

# The script is based on the swagger documentation on the website API:
# https://ubuntu.com/security/api/docs#/default/post_security_releases_json
#
# For any issue hit contact the webteam in the 'Web & Design" channel,
# as well as consider filing issue on the github for the api:
#   https://github.com/canonical-web-and-design/ubuntu-com-security-api

# can use
#  $ curl -X GET "https://ubuntu.com/security/releases/RELEASE.json" -H "accept: application/json" | jq .
# to see what the website's version of the release is.

import argparse
import difflib
import json
import requests
import os
import re
import sys
from http.cookiejar import MozillaCookieJar

# Local
from macaroonbakery import httpbakery

# raise Exception("Remove this line and update 27-35 with data about the new devel release.")

BASE_QUERY_URL = "https://ubuntu.com/security"
BASE_POST_URL = "https://ubuntu.com/security/updates"

def authentication(request, payload, url):

    client = httpbakery.Client(cookies=MozillaCookieJar(".login"))

    if os.path.exists(client.cookies.filename):
        client.cookies.load(ignore_discard=True)

    response = client.request(request, url=url, json=payload)
    client.cookies.save(ignore_discard=True)
    return response


def do_add_release(release, base_url, debug):
    action = "POST"
    # For some reason, the website doesn't let us push the "support_tag"
    # attribute
    payload = releases[release].copy()
    payload.pop("support_tag", None)
    url = "%s/releases.json" % (base_url)

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
        return True
    else:
        response = authentication(action, payload, url)
        return check_response(release, response)


def do_update_release(release, base_url, debug):
    action = "PUT"
    # For some reason, the website doesn't let us push the "support_tag"
    # attribute, see
    # https://github.com/canonical-web-and-design/ubuntu-com-security-api/issues/54
    payload = releases[release].copy()
    payload.pop("support_tag", None)
    url = "%s/releases/%s.json" % (base_url, payload["codename"])

    if debug:
        print("%s %s" % (action, url), file=sys.stderr)
        print("%s" % json.dumps(payload, indent=2), file=sys.stderr)
        return True
    else:
        response = authentication(action, payload, url)
        return check_response(release, response)


def check_response(release, response):
    if not re.match(r"^<Response \[2..\]>$", str(response)):
        # communicating with the endpoint failed, display the full
        # response
        print("%s: %s %s" % (release, response, response))
        return False
    else:
        print("%s: %s %s" % (release, response, response.json()['message']))
        return True


def print_json_diff(local_json, remote_json, local_desc, remote_desc):
    local = json.dumps(local_json, sort_keys=True, indent=2).split("\n")
    remote = json.dumps(remote_json, sort_keys=True, indent=2).split("\n")
    d = difflib.unified_diff(local, remote, fromfile=local_desc, tofile=remote_desc, lineterm="", n=len(local))
    for line in d:
        print(line)


def do_validate_release(release, base_url, quiet=False, debug=False):
    is_equal = True
    url = "%s/releases/%s.json" % (base_url, release)
    headers = {
        "accept": "application/json",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
    }
    if debug:
        print("querying %s" % (url))

    # no need to authenticate, it's a public API
    response = requests.get(url=url, headers=headers)
    if response.ok:
        content = response.json()
        # the website contains an extra field that is not part of the
        # publication API
        if not content == releases[release]:
            print_json_diff(releases[release], content, "stored %s info" % release, url)
            is_equal = False
        elif not quiet:
            print("%s (%s) okay:" % (release, releases[release]["version"]))
            if debug:
                print(json.dumps(response.json(), indent=2))
    else:
        # ignore server errors
        if response.status_code >= 500:
            print("%s (%s) ignoring server error: %s" % (release, releases[release]["version"], response))
        else:
            print("%s (%s) not okay:" % (release, releases[release]["version"]))
            print(response)
            is_equal = False

    return is_equal


# These should really be stored elsewhere
releases = {
    "questing": {
        "name": "Questing Quokka",
        "version": "25.10",
        "codename": "questing",
        "development": True,
        "lts": False,
        "support_tag": "",
        "release_date": "2025-10-09T00:00:00",
        "support_expires": "2026-07-09T00:00:00",
        "esm_expires": "2026-07-09T00:00:00",
    },
    "plucky": {
        "name": "Plucky Puffin",
        "version": "25.04",
        "codename": "plucky",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2025-04-17T00:00:00",
        "support_expires": "2026-01-15T00:00:00",
        "esm_expires": "2026-01-15T00:00:00",
    },
    "oracular": {
        "name": "Oracular Oriole",
        "version": "24.10",
        "codename": "oracular",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2024-10-10T00:00:00",
        "support_expires": "2025-07-10T00:00:00",
        "esm_expires": "2025-07-10T00:00:00",
    },
    "noble": {
        "name": "Noble Numbat",
        "version": "24.04",
        "codename": "noble",
        "development": False,
        "lts": True,
        "support_tag": "LTS",
        "release_date": "2024-04-25T00:00:00",
        "support_expires": "2029-05-31T00:00:00",
        "esm_expires": "2034-04-30T00:00:00",
    },
    "mantic": {
        "name": "Mantic Minotaur",
        "version": "23.10",
        "codename": "mantic",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2023-10-12T00:00:00",
        "support_expires": "2024-07-31T00:00:00",
        "esm_expires": "2024-07-31T00:00:00",
    },
    "lunar": {
        "name": "Lunar Lobster",
        "version": "23.04",
        "codename": "lunar",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2023-04-20T00:00:00",
        "support_expires": "2024-01-31T00:00:00",
        "esm_expires": "2024-01-31T00:00:00",
    },
    "kinetic": {
        "name": "Kinetic Kudu",
        "version": "22.10",
        "codename": "kinetic",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2022-10-20T00:00:00",
        "support_expires": "2023-07-31T00:00:00",
        "esm_expires": "2023-07-31T00:00:00",
    },
    "jammy": {
        "name": "Jammy Jellyfish",
        "version": "22.04",
        "codename": "jammy",
        "development": False,
        "lts": True,
        "support_tag": "LTS",
        "release_date": "2022-04-21T00:00:00",
        "support_expires": "2027-04-30T00:00:00",
        "esm_expires": "2032-04-30T00:00:00",
    },
    "impish": {
        "name": "Impish Indri",
        "version": "21.10",
        "codename": "impish",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2021-10-14T00:00:00",
        "support_expires": "2022-07-31T00:00:00",
        "esm_expires": "2022-07-31T00:00:00",
    },
    "hirsute": {
        "name": "Hirsute Hippo",
        "version": "21.04",
        "codename": "hirsute",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2021-04-22T00:00:00",
        "support_expires": "2022-01-31T00:00:00",
        "esm_expires": "2022-01-31T00:00:00",
    },
    "groovy": {
        "name": "Groovy Gorilla",
        "version": "20.10",
        "codename": "groovy",
        "development": False,
        "lts": False,
        "support_tag": "",
        "release_date": "2020-10-20T00:00:00",
        "support_expires": "2021-07-31T00:00:00",
        "esm_expires": "2021-07-31T00:00:00",
    },
    "focal": {
        "name": "Focal Fossa",
        "version": "20.04",
        "codename": "focal",
        "development": False,
        "lts": True,
        "support_tag": "LTS",
        "release_date": "2020-04-23T00:00:00",
        "support_expires": "2025-05-29T00:00:00",
        "esm_expires": "2030-04-23T00:00:00",
    },
    "bionic": {
        "name": "Bionic Beaver",
        "version": "18.04",
        "codename": "bionic",
        "development": False,
        "lts": True,
        "support_tag": "ESM",
        "release_date": "2018-04-26T00:00:00",
        "support_expires": "2023-04-30T00:00:00",
        "esm_expires": "2028-04-30T00:00:00",
    },
    "xenial": {
        "name": "Xenial Xerus",
        "version": "16.04",
        "codename": "xenial",
        "development": False,
        "lts": True,
        "support_tag": "ESM",
        "release_date": "2016-04-21T00:00:00",
        "support_expires": "2021-04-30T00:00:00",
        "esm_expires": "2026-04-30T00:00:00",
    },
    "trusty": {
        "name": "Trusty Tahr",
        "codename": "trusty",
        "version": "14.04",
        "development": False,
        "lts": True,
        "support_tag": "ESM",
        "release_date": "2014-04-17T00:00:00",
        "support_expires": "2019-04-30T00:00:00",
        "esm_expires": "2026-04-30T00:00:00",
    },
}


def main():
    is_okay = True

    parser = argparse.ArgumentParser(
        description="CLI to manage Ubuntu Releases on https://ubuntu.com/security/",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--action", required=True, choices=["add", "update", "validate"], action="store", help="API action to perform"
    )
    parser.add_argument(
        "-d", "--debug", action="store_true", default=False, help="Don't perform add/update action; instead emit json to stdout"
    )
    parser.add_argument("-q", "--quiet", default=False, action="store_true", help="Validate silently unless there's an error")
    parser.add_argument(
        "-e", "--query-endpoint", default=BASE_QUERY_URL, action="store",
        type=str, help="Base URL of the API query endpoint "
    )
    parser.add_argument(
        "-E", "--post-endpoint", default=BASE_POST_URL, action="store",
        type=str, help="Base URL of the API post endpoint "
    )
    parser.add_argument(
        "release", choices=["all"] + list(releases.keys()), action="store", help="release to operate on"
    )
    args = parser.parse_args()

    if args.action == "add":
        if not do_add_release(args.release, args.post_endpoint, args.debug):
            is_okay = False
    elif args.action == "update":
        if not do_update_release(args.release, args.post_endpoint, args.debug):
            is_okay = False
    elif args.action == "validate":
        if args.release == "all":
            for rel in releases:
                if not do_validate_release(rel, args.query_endpoint, args.quiet, args.debug):
                    is_okay = False
        else:
            if not do_validate_release(args.release, args.query_endpoint, args.quiet, args.debug):
                is_okay = False

    return is_okay


if __name__ == "__main__":
    if not main():
        sys.exit(1)
