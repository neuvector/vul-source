#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Module containing functions for uploading a USN to the USN repo and creating
# the relevant PR
#
# Author: Nick Galanis <nick.galanis@canonical.com>
# Copyright (C) 2025 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, "Version" 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
import argparse
import configparser
import os
import shutil
import subprocess
from git import Repo, GitCommandError

from utils import usn_number, packages, USN_GH, new_usn_dir, print_info, print_error, print_success

def run_command(command, cwd=None):
    result = subprocess.run(command, shell=False, cwd=cwd, capture_output=True, text=True)
    if result.returncode != 0:
        print_error(f"Command failed: {command}")
        print_error(result.stderr)
        exit(1)

def push_to_usn_repo(packages, no_pr, cmd="gh"):
    branch_name = f"USN-{usn_number}"
    # copy the file to the actual dir for uploading
    final_file_path = os.path.join(USN_GH, f"usn-json/{branch_name}.json")
    shutil.copy(os.path.join(new_usn_dir, f"{branch_name}.json"), final_file_path)
    str_packages = ",".join(packages)
    commit_message = f"Add {branch_name} for {str_packages}"
    merge_request_title = commit_message

    desc_path = os.path.join(new_usn_dir, f"USN-{usn_number}-template.yaml")

    # Read .git/config
    config = configparser.ConfigParser()
    config.read(os.path.join(USN_GH, '.git', 'config'))

    try:
        repo = Repo(USN_GH)
        origin = repo.remote(name='origin')

        # Ensure we're on the main branch
        repo.git.checkout('main')

        # Pull the latest changes
        origin.pull()

        # check if the branch already exists, if not, create it
        remote_branches = [ref.name.split("/")[-1] for ref in origin.refs]
        if branch_name in remote_branches:
            repo.git.checkout(branch_name)
            # not creating a PR if the branch is already there
            no_pr = True
        else:
            repo.git.checkout('-b', branch_name)

        # Add the file to staging
        repo.git.add(final_file_path)

        # check if the file was changed
        if repo.is_dirty():
            # Commit the changes
            repo.index.commit(commit_message)
            # Push the new branch to the remote repository
            origin.push(refspec=f'{branch_name}:{branch_name}')
            print_success(f"Changes committed and pushed to {branch_name}.")
        else:
            print_info("No changes to commit. Nothing pushed.")

    except GitCommandError as e:
        print_error(f"An error occurred: {e}")

    with open(desc_path, "r") as file:
        description = file.read()

    # Create the PR using GH CLI
    if not no_pr:
        try:
            with open(desc_path, "r") as file:
                description = file.read()
        except FileNotFoundError:
            print_error("Error: The template YAML file of the USN was not found.")
            exit(1)
        print_info("Trying to create PR...")
        run_command([f'{cmd}', 'pr', 'create',
                     '--title', f'{merge_request_title}',
                     '--body', f'{description}',
                     '--base', 'main',
                     '--head', f'{branch_name}'], cwd=USN_GH)
        print_success("PR created in USN repo!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Upload the local changes for your USN to GitHub.")

    # optional arguments
    parser.add_argument("--no-pr", action="store_true", help="Don't create the PR in GH.")

    args = parser.parse_args()

    push_to_usn_repo(packages, args.no_pr)
