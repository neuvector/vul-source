#!/usr/bin/env pytest-3
# -*- coding: utf-8 -*-
#
# Author: Marc Deslauriers <marc.deslauriers@canonical.com>
# Copyright (C) 2025 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Simple tests for upload_usn.py

import ast
import git
import os
import shutil
import tempfile
import unittest

class TestUploadUsn(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # We need to create the tempdir and set the environment
        # variables here before importing upload_usn as there doesn't
        # seem to be a good way of changing them later, even if we
        # attempt to reload upload_usn with importlib
        cls.tempdir = tempfile.mkdtemp(prefix="ucttest-", dir="/tmp")
        cls.usn_gh = os.path.join(cls.tempdir, 'usn-repo')
        cls.usn_num = "999999-1"
        os.environ["USN"] = cls.usn_num
        os.environ["SRCPKG"] = "foobar"
        os.environ["USN_GH"] = cls.usn_gh

        import upload_usn
        cls.upload_usn = upload_usn

    @classmethod
    def tearDownClass(cls):
        if os.path.exists(cls.tempdir):
            shutil.rmtree(cls.tempdir)

    def setUp(self):
        self.script_path = os.path.dirname(os.path.realpath(__file__))
        self.usn_gh_origin = os.path.join(self.tempdir, 'usn-repo-origin')
        self.new_usn_dir = os.path.join(self.usn_gh, f"new-usn-{self.usn_num}")
        self.usn_json_dir = os.path.join(self.usn_gh, "usn-json")
        self.usn_json = os.path.join(self.usn_json_dir, f"USN-{self.usn_num}.json")
        self.fake_gh = os.path.join(self.tempdir, 'fakegh')
        self.fake_gh_out = os.path.join(self.tempdir, 'fakegh-out')
        self._setup_git_repos()
        self._setup_fake_gh()

    def _setup_git_repos(self):
        '''Setup a basic repo like USN_GH expects'''

        if os.path.exists(self.usn_gh):
            shutil.rmtree(self.usn_gh)
        if os.path.exists(self.usn_gh_origin):
            shutil.rmtree(self.usn_gh_origin)

        testfile = os.path.join(self.usn_gh, "testfile")
        repo = git.Repo.init(self.usn_gh)
        open(testfile, "wb").close()
        os.makedirs(self.usn_json_dir)
        repo.index.add([testfile, self.usn_json_dir])
        repo.index.commit("initial commit")
        repo.create_head("main")

        git.Repo.init(self.usn_gh_origin, bare=True)

        origin = repo.create_remote("origin", self.usn_gh_origin)
        origin.push("main")

    def _setup_fake_gh(self):
        contents = f'''#!/bin/python3
import sys
with open("{self.fake_gh_out}", "w") as file:
    file.write("%s" % sys.argv)
'''
        with open(self.fake_gh, "w") as file:
            file.write(contents)
        os.chmod(self.fake_gh, 0o775)

    def _get_fake_gh_out(self):
        with open(self.fake_gh_out, "r") as file:
            output = file.read()
        return output

    def test_run_command_ls(self):
        self.upload_usn.run_command("ls")

    def test_run_command_false(self):
        with self.assertRaises(SystemExit):
            self.upload_usn.run_command("false")

    def test_run_command_foobar(self):
        with self.assertRaises(FileNotFoundError):
            self.upload_usn.run_command("foooobarrrr")

    def test_push_to_usn_repo_good(self):

        os.makedirs(self.new_usn_dir)
        for fn in ("USN-999999-1.json", "USN-999999-1-template.yaml"):
            shutil.copy(f"{self.script_path}/testdata/dataset1/{fn}", self.new_usn_dir)

        self.upload_usn.push_to_usn_repo([], False, cmd=self.fake_gh)

        self.assertTrue(os.path.exists(self.usn_json))
        self.assertTrue(self.usn_num in self._get_fake_gh_out())

    def test_gh_command_quoting(self):

        os.makedirs(self.new_usn_dir)
        for fn in ("USN-999999-1.json", "USN-999999-1-template.yaml"):
            shutil.copy(f"{self.script_path}/testdata/dataset2/{fn}", self.new_usn_dir)

        self.upload_usn.push_to_usn_repo([], False, cmd=self.fake_gh)

        output = ast.literal_eval(self._get_fake_gh_out())
        body = output[output.index("--body") + 1]
        self.assertTrue("handled memory \"when" in body)
        self.assertTrue("malicious 'input" in body)

