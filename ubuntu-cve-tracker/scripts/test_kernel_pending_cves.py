#!/usr/bin/env pytest-3
# -*- coding: utf-8 -*-
#
# Author: Rodrigo Figueiredo Zaiden <rodrigo.zaiden@canonical.com>
# Copyright (C) 2005-2025 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import unittest.mock as mock
import io
import kernel_pending_cves

class TestYamlFile:
    def test_kernel_dictionary(self):
        kernels = kernel_pending_cves.load_yaml_file()

        assert isinstance(kernels, dict)

        # consistency check for a minimum dictionary size, as the size
        # grows, a good lower boundary can be what is in the dict now
        # and does not need to be updated
        assert len(kernels) >= 40

class MockUSNDb():
    def __init__(self, pkgs, database, opt):
        self.pkgs = pkgs
        self.database = database
        self.opt = opt

    def get_latest_usn_version(self, kernel, release):
        res = {"noble": {"linux": "6.8.0-44.44"},
               "jammy": {"linux-fips": "5.15.0-121.131+fips1"},
               "xenial": {"linux": "4.4.0-259.292",
                          "linux-fips": "4.4.0-259.292+fips1"},
               "trusty": {"linux": "3.13.0-204.255"}}
        try:
            return res[release][kernel]
        except KeyError:
            return None

allcvesmock = {'CVE-2000-001':{'pkgs': {'linux':
                                        {'trusty': ['pending', '3.13.0-11.12'],
                                        'esm-infra-legacy/trusty': ['pending', '3.13.0-203.254'],
                                         'noble': ['pending', '6.8.0-43.43']}}},
               'CVE-2000-002':{'pkgs': {'linux-fips':
                                        {'fips-updates/xenial': ['pending', '4.4.0-257.292+fips1'],
                                        'fips-updates/jammy': ['pending', '5.15.0-120.130+fips1']},
                                        'linux':
                                        {'trusty': ['pending', '3.13.0-12.13'],
                                         'esm-infra/xenial': ['pending', '4.4.0-257.291']}}},
               'CVE-2000-003':{'pkgs': {'linux':
                                        {'esm-infra-legacy/trusty': ['pending', '3.13.0-205.256'],
                                         'noble': ['pending', '6.8.0-45.45']}}},
               'CVE-2000-004':{'pkgs': {'linux':
                                        {'esm-infra-legacy/trusty': ['released', '3.13.0-204.255'],
                                         'noble': ['released', '6.8.0-44.44'],
                                         'xenial': ['not-affected', '4.4.0-10.12']}}}}

class TestPendingCves:
    @mock.patch("usn_lib.USNdb", new=MockUSNDb)
    @mock.patch("sys.stdout", new_callable=io.StringIO)
    @mock.patch("cve_lib.load_all", return_value=allcvesmock)
    def test_pending_cves(self, mock_cves, mock_stdout):
        kernel_pending_cves.main([])

        output = mock_stdout.getvalue().strip()
        expected = """\
linux trusty 3.13.0-204.255
CVE-2000-001: pending 3.13.0-11.12
CVE-2000-002: pending 3.13.0-12.13

linux esm-infra-legacy/trusty 3.13.0-204.255
CVE-2000-001: pending 3.13.0-203.254

linux esm-infra/xenial 4.4.0-259.292
CVE-2000-002: pending 4.4.0-257.291

linux noble 6.8.0-44.44
CVE-2000-001: pending 6.8.0-43.43

linux-fips fips-updates/xenial 4.4.0-259.292+fips1
CVE-2000-002: pending 4.4.0-257.292+fips1

linux-fips fips-updates/jammy 5.15.0-121.131+fips1
CVE-2000-002: pending 5.15.0-120.130+fips1"""

        assert output == expected
