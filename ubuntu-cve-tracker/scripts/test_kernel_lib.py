#!/usr/bin/env pytest-3
# -*- coding: utf-8 -*-
#
# Author: Steve Beattie <sbeattie@ubuntu.com>
# Copyright (C) 2020 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Simple tests for kernel_lib

import pytest, os, textwrap
from kernel_lib import (
    kernel_meta_abi,
    kernel_package_abi,
    kernel_package_version,
    convert_name_to_meta,
    convert_name_to_signed,
    is_kernel_cna_cve,
    get_affected_subsystems,
    get_kernel_break_fix,
    get_kernel_pending_fixes,
    print_pending_fixes,
    cves_need_description
)
from uct.config import read_uct_config
from cve_lib import load_cve
from io import StringIO

class TestKernelMabiCalc:
    def test_basic_version(self):
        assert kernel_meta_abi("5.4.0.40.44") == 40

    def test_hwe_version(self):
        assert kernel_meta_abi("5.4.0.40.44~18.04.32") == 40

    # noble kernel meta package versions were changed to match the
    # primary package versioning scheme UPSTREAM_VERSION-ABI.BUILD
    def test_noble_newer_version(self):
        assert kernel_meta_abi("6.8.0-14.15") == 14

    def test_noble_newer_derieved_version(self):
        assert kernel_meta_abi("6.8.0-1014.15") == 1014


class TestKernelVersionCalc:
    def test_basic_version(self):
        assert kernel_package_version("4.15.0-45.54") == "4.15.0"

    def test_hwe_version(self):
        assert kernel_package_version("5.4.0-40.44~18.04.32") == "5.4.0"


class TestKernelABICalc:
    def test_basic_version(self):
        assert kernel_package_abi("4.15.0-45.54") == 45

    def test_hwe_version(self):
        assert kernel_package_abi("5.4.0-40.44~18.04.32") == 40


class TestKernelComputeMetaName:
    def test_basic_kernel(self):
        assert convert_name_to_meta("linux") == "linux-meta"

    def test_hwe_kernel(self):
        assert convert_name_to_meta("linux-hwe") == "linux-meta-hwe"

    def test_hwe_versioned_kernel(self):
        assert convert_name_to_meta("linux-hwe-5.4") == "linux-meta-hwe-5.4"

    def test_bad_kernel_name(self):
        with pytest.raises(ValueError):
            convert_name_to_meta("not-linux")


class TestKernelComputeSignedName:
    def test_basic_kernel(self):
        assert convert_name_to_signed("linux") == "linux-signed"

    def test_hwe_kernel(self):
        assert convert_name_to_signed("linux-hwe") == "linux-signed-hwe"

    def test_hwe_versioned_kernel(self):
        assert convert_name_to_signed("linux-hwe-5.4") == "linux-signed-hwe-5.4"

    def test_bad_kernel_name(self):
        with pytest.raises(ValueError):
            convert_name_to_signed("not-linux")


class TestKernelCVEs:
    def test_is_kernel_cna_cve(self, capfd):
        test_cases = {
            "CVE-2024-26581": True,
            "CVE-2024-24860": False,
        }

        for cve, expected in test_cases.items():

            result = is_kernel_cna_cve(cve)
            out, err = capfd.readouterr()
            if not result and "Failed to fetch patch URL" in err:
                pytest.skip("Skipping test due to HTTP error")

            assert result == expected

    def test_get_kernel_break_fix(self):
        break_commits, fix_commits = get_kernel_break_fix('CVE-2024-26581')
        assert fix_commits == ['60c0c230c6f046da536d3df8b39a20b9a9fd6af0']
        assert break_commits == ['f718863aca469a109895cb855e6b81fff4827d71']

    def test_get_affected_subsystems(self):
        config = read_uct_config()
        if 'linux_kernel_path' not in config:
            pytest.skip("linux_kernel_path not configured, skipping!")

        expected_subsystems = {'Netfilter': ['net/netfilter/nft_set_rbtree.c']}
        expected_other_files = []

        subsystems, other_files = get_affected_subsystems([['60c0c230c6f046da536d3df8b39a20b9a9fd6af0']])
        assert subsystems == expected_subsystems
        assert other_files == expected_other_files

        fail_fix_commit = ['deadb33f']
        with pytest.raises(ValueError):
            get_affected_subsystems([fail_fix_commit])

@pytest.fixture(scope="session")
def cves():
    table = dict()
    for cve in ("CVE-2024-26882", "CVE-2024-26884", "CVE-2024-26886"):
        cvedir = "scripts/testfiles/kernel_lib"
        cvefile = os.path.join(cvedir, cve)
        info = load_cve(cvefile)
        table.setdefault(cve, info)
    return table

class TestGetKernelPendingFixes:
    def test_current_version_released(self, cves):
        expected = [("CVE-2024-26882", "linux", "noble", "released", "6.8.0-35.35")]
        assert expected == get_kernel_pending_fixes(cves, "linux", "6.8.0-34.34", "6.8.0-35.35", ["noble"])

    def test_current_version_pending(self, cves):
        expected = [("CVE-2024-26884", "linux", "noble", "pending", "6.8.0-36.36")]
        assert expected == get_kernel_pending_fixes(cves, "linux", "6.8.0-35.35", "6.8.0-36.36", ["noble"])

    def test_current_version_older_than_last(self, cves):
        expected = []
        assert expected == get_kernel_pending_fixes(cves, "linux", "6.8.0-36.36", "6.8.0-35.35", ["noble"])

    def test_forced_cve(self, cves):
        expected = [("CVE-2024-26882", "linux", "noble", "released", "6.8.0-35.35"),
                    ("CVE-2024-26884", "linux", "noble", "pending", "6.8.0-36.36")]
        assert expected == get_kernel_pending_fixes(cves, "linux", "6.8.0-34.34", "6.8.0-35.35", ["noble"], ["CVE-2024-26884"])

    def test_exclude_not_reportable(self, cves):
        expected = [("CVE-2024-26882", "linux", "noble", "released", "6.8.0-35.35"),
                    ("CVE-2024-26884", "linux", "noble", "pending", "6.8.0-36.36")]
        assert expected == get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-35.35", ["noble"], ["CVE-2024-26884"])

    def test_not_existing_package(self, cves):
        expected = []
        assert expected == get_kernel_pending_fixes(cves, "lanux", "6.8.0-34.34", "6.8.0-35.35", ["noble"], ["CVE-2024-26884"])

class TestPrintPendingFixes:
    def test_print_with_default_options(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", out=got)

        expected = textwrap.dedent("""\
            CVE-2024-26882 linux noble released 6.8.0-35.35
            [== WARNING state released is not pending WARNING ==]
             [XXX-NEEDED-XXX]
            [== WARNING version 6.8.0-35.35 is older than 6.8.0-36.36 WARNING ==]

            CVE-2024-26884 linux noble pending 6.8.0-36.36
             [XXX-NEEDED-XXX]
            ========================================================
            Mismatch between expected versions and pending versions,
            Is this an embargoed security update?
            """)

        assert got.getvalue() == expected

    def test_minimal_output(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=False, descriptions=False, warn=False, fixes=False, out=got)

        expected = textwrap.dedent("""\
            CVE-2024-26882
            CVE-2024-26884
            """)

        assert got.getvalue() == expected

    def test_states(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=True, descriptions=False, warn=False, fixes=False, out=got)

        expected = textwrap.dedent("""\
            CVE-2024-26882 linux noble released 6.8.0-35.35
            CVE-2024-26884 linux noble pending 6.8.0-36.36
            """)

        assert got.getvalue() == expected

    def test_descriptions(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=False, descriptions=True, warn=False, fixes=False, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26882
             [XXX-NEEDED-XXX]
            [== WARNING version 6.8.0-35.35 is older than 6.8.0-36.36 WARNING ==]

            CVE-2024-26884
             [XXX-NEEDED-XXX]
            """)
        assert got.getvalue() == expected

    def test_descriptions_warn(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=False, descriptions=True, warn=True, fixes=False, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26882
             [XXX-NEEDED-XXX]
            [== WARNING version 6.8.0-35.35 is older than 6.8.0-36.36 WARNING ==]

            CVE-2024-26884
             [XXX-NEEDED-XXX]
            ========================================================
            Mismatch between expected versions and pending versions,
            Is this an embargoed security update?
            """)
        assert got.getvalue() == expected

    def test_descriptions_forced_cve(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=False, descriptions=True, warn=False, fixes=False, forced_cves=['CVE-2024-26882'], out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26882
             [XXX-NEEDED-XXX]
            CVE-2024-26884
             [XXX-NEEDED-XXX]
            """)
        assert got.getvalue() == expected

    def test_ubuntu_description(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "5.15.0-116.126", "5.15.0-117.127", only_releases=['jammy'])
        got = StringIO()
        print_pending_fixes(cves, pending, "5.15.0-117.127", states=False, descriptions=True, warn=False, fixes=False, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26886
             Sample description for testing
            """)
        assert got.getvalue() == expected

    def test_fixes(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", states=False, descriptions=False, warn=False, fixes=True, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26882
             b0ec2abf98267f14d032102551581c833b0659d3
            CVE-2024-26884
             6787d916c2cf9850c97a0a3f73e08c43e7d973b1
            """)
        assert got.getvalue() == expected

    def test_fixes_no_breakfix(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "5.15.0-116.126", "5.15.0-117.127", only_releases=['jammy'])
        got = StringIO()
        print_pending_fixes(cves, pending, "5.15.0-117.127", states=False, descriptions=False, warn=False, fixes=True, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26886
            """)
        assert got.getvalue() == expected

    def test_no_warn(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36")
        got = StringIO()
        print_pending_fixes(cves, pending, "6.8.0-36.36", warn=False, out=got)
        expected = textwrap.dedent("""\
            CVE-2024-26882 linux noble released 6.8.0-35.35
             [XXX-NEEDED-XXX]
            [== WARNING version 6.8.0-35.35 is older than 6.8.0-36.36 WARNING ==]

            CVE-2024-26884 linux noble pending 6.8.0-36.36
             [XXX-NEEDED-XXX]
            """)
        assert got.getvalue() == expected

class TestCvesNeedDescription:
    def test_need_description_false(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "5.15.0-116.126", "5.15.0-117.127", only_releases=['jammy'])
        expected = False
        got = cves_need_description(cves, [x[0] for x in pending])
        assert got == expected

    def test_need_description_true(self, cves):
        pending = get_kernel_pending_fixes(cves, "linux", "6.8.0-33.33", "6.8.0-36.36", only_releases=['noble'])
        expected = True
        got = cves_need_description(cves, [x[0] for x in pending])
        assert got == expected
