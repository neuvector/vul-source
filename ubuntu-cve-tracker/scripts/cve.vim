" Vim syntax file
" Language: UCT CVEs
" Latest Revision: Jan 2023
"
" To use:
" $ mkdir -p ~/.vim/syntax
" $ ln -s $UCT/scripts/cve.vim ~/.vim/syntax/cve.vim
" Add to ~/.vimrc:
" autocmd BufNewFile,BufRead CVE-[0-9][0-9][0-9][0-9]-[0-9N]\\\{4,\} set syntax=cve
"
" TODO:
" - maybe do something with URLs
"

if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

let s:supported_releases = ["devel", "upstream", "product", "snap", "focal", "jammy", "noble", "oracular", "plucky"]
let s:products = ["precise/esm", "trusty/esm", "esm-infra-legacy/trusty", "esm-infra/xenial", "esm-apps/xenial", "esm-infra/bionic", "esm-apps/bionic", "esm-apps/focal", "esm-apps/jammy", "esm-apps/noble", "fips/xenial", "fips/bionic", "fips/focal", "fips-updates/xenial", "fips-updates/bionic", "fips-updates/focal", "ros-esm/xenial", "ros-esm/bionic"]
let s:eol_releases = ["warty", "hoary", "breezy", "dapper", "edgy", "feisty", "gutsy", "hardy", "intrepid", "jaunty", "karmic", "lucid", "maverick", "natty", "oneiric", "precise", "quantal", "raring", "saucy", "trusty", "utopic", "vivid", "vivid/stable-phone-overlay", "vivid/ubuntu-core", "wily", "xenial", "yakkety", "zesty", "artful", "cosmic", "disco", "eoan", "groovy", "hirsute", "impish", "bionic", "kinetic", "lunar", "mantic"]
let s:all_releases = s:supported_releases + s:eol_releases + s:products

" Should match case except for the keys of each field
syn case match

" Everything that is not explicitly matched by the rules below
syn match cveElse "^.*$"

syn match cveSrcPkg contained "[a-z0-9][a-z0-9+.-]\+"
syn match cveId contained "CVE-[0-9][0-9][0-9][0-9]-[0-9N]\{4,}"
syn match cveDate contained  "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\( [0-2][0-9]:[0-5][0-9]:[0-5][0-9] \([A-Z][A-Z][A-Z]\|[+-][01][0-9][0-9][0-9]\)\)\?"
syn match cveStatusNoAction contained "\(deferred\|released\|ignored\|not\-affected\|DNE\)"
syn match cveStatusAction contained "\(needs\-triage\|needed\|pending\)"
syn match cveStatusExtra contained " (.\+)"

" Standard keys
syn match cveKey "^\%(Candidate\|PublicDate\|PublicDateAtUSN\|CRD\|References\|Description\|Ubuntu-Description\|Notes\|Mitigation\|CVSS\|Bugs\|Discovered-by\|Assigned-to\|Tags\|Patches_[a-z0-9][a-z0-9+.-]\+\): *"

" Release/status key
" <release>_<srcpkg>: <status>
execute 'syn match cveKeyReleaseEOL "^\%(' . join(s:eol_releases, '\|') . '\)_[a-z0-9][a-z0-9+.-]\+: *"'
execute 'syn match cveKeyRelease "^\%(' . join(s:supported_releases, '\|') . '\)_[a-z0-9][a-z0-9+.-]\+: *"'

" Product/Release/status key
" <product>/<release>_<srcpkg>: <status>
execute 'syn match cveKeyProduct "^\%(' . join(s:products, '\|') . '\)_[a-z0-9][a-z0-9+.-]\+: *"'

" Priorities key
" Priority[_<srcpkg>[_<release>]]: <priority>
syn match cvePriorityValue contained "\(negligible\|low\|medium\|high\|critical\)"
execute 'syn match cvePriorityKey "^Priority\(_[a-z0-9][a-z0-9+.-]\+\(_\(' . join(s:all_releases, '\|') . '\)\)\?\)\?: *"'

" Tags key
syn match cveTagsValue contained "\(cisa-kev\) *"
execute 'syn match cveTagsKey "^Tags: *"'
" Tags_<srcpkg>[_<release>]: <tag>
syn match cvePkgTagsValue contained "\(apparmor\|fortify-source\|hardlink-restriction\|heap-protector\|not-ue\|pie\|stack-protector\|symlink-restriction\|universe-binary\) *"
execute 'syn match cvePkgTagsKey "^Tags\(_[a-z0-9][a-z0-9+.-]\+\(_\(' . join(s:all_releases, '\|') . '\)\)\?\)\?: *"'

" Fields where we do strict syntax checking
syn region cveStrictField start="^Priority" end="$" contains=cvePriorityKey,cvePriorityValue oneline
syn region cveStrictField start="^Tags_" end="$" contains=cvePkgTagsKey,cvePkgTagsValue oneline
syn region cveStrictField start="^Tags:" end="$" contains=cveTagsKey,cveTagsValue oneline
syn region cveStrictField start="^Candidate" end="$" contains=cveKey,cveId
syn region cveStrictField start="^\(PublicDate\|CRD\)" end="$" contains=cveKey,cveDate
syn region cveStrictField start="^Patches_" end=":$" contains=cveKey,cveSrcPkg oneline
syn region cveStrictField start="^[a-z/-]\+_" end="$" contains=cveKeyRelease,cveKeyReleaseEOL,cveKeyProduct,cveStatusNoAction,cveStatusAction,cveStatusExtra oneline

if version >= 508 || !exists("did_cve_syn_inits")
  command -nargs=+ HiLink hi def link <args>

  HiLink cveKey                 Keyword
  HiLink cvePriorityKey         Keyword
  HiLink cveTagsKey             Keyword
  HiLink cvePkgTagsKey          Keyword
  HiLink cveKeyRelease          Keyword
  HiLink cveKeyReleaseEOL       Keyword
  HiLink cveKeyProduct          Type
  HiLink cveElse                Normal
  HiLink cveStrictField         Error
  HiLink cveStatusNoAction      Identifier
  HiLink cveStatusAction        Todo
  HiLink cveStatusExtra         Number

  delcommand HiLink
endif

" Replace priority. You don't need to be in the priority line to run this code
function! cve#set_priority(priority)
    %s/^Priority: .*$/\='Priority: ' . a:priority/|''
endfunction
command! -bar Critical call cve#set_priority("critical")
command! -bar High call cve#set_priority("high")
command! -bar Medium call cve#set_priority("medium")
command! -bar Low call cve#set_priority("low")
command! -bar Negligible call cve#set_priority("negligible")
:map <leader>h :High<CR>
:map <leader>m :Medium<CR>
:map <leader>l :Low<CR>

" Replace status for current line (maybe add support for selected lines)
function! cve#set_status(status)
    if visualmode(1)==# 'V'
      '<,'>s/: .*$/\=': ' . a:status/
    else
      s/: .*$/\=': ' . a:status/
    endif
endfunction

function! cve#set_status_reason(status, reason)
    call cve#set_status(a:status . ' (' . a:reason . ')')
endfunction

" function to set cve status and prompt for the explanation of the status
function! cve#set_status_reason_prompt(status, prompt)
    call inputsave()
    let reason = input(a:prompt . ": ")
    call inputrestore()
    call cve#set_status_reason(a:status, reason)
endfunction

" function to set assigned-to field
function! cve#set_assigned_to( ... )
    %s/^Assigned-to:.*$/\='Assigned-to: ' . a:1/|''
endfunction

command! -bar DNE call cve#set_status("DNE")
command! -bar Ignored call cve#set_status("ignored")
command! -bar IgnoredEndStandardSupport call cve#set_status("ignored (end of standard support)")
command! -bar IgnoredEndOfLife call cve#set_status("ignored (end of life)")
command! -bar Needed call cve#set_status("needed")
command! -bar NeedsTriage call cve#set_status("needs-triage")
command! -bar NotAffected call cve#set_status("not-affected")
command! -bar NotAffectedCodeNotPresent call cve#set_status_reason("not-affected", "code not present")
command! -bar NotAffectedReason call cve#set_status_reason_prompt("not-affected", "Enter reason for not-affected")
command! -bar -nargs=* AssignedTo call cve#set_assigned_to(<q-args>)
nnoremap <silent> <leader>1 :Needed<CR>
vnoremap <silent> <leader>1 :<c-u>Needed<CR>
nnoremap <silent> <leader>2 :NotAffected<CR>
vnoremap <silent> <leader>2 :<c-u>NotAffected<CR>
nnoremap <silent> <leader>3 :NotAffectedCodeNotPresent<CR>
vnoremap <silent> <leader>3 :<c-u>NotAffectedCodeNotPresent<CR>
nnoremap <silent> <leader>4 :NotAffectedReason<CR>
vnoremap <silent> <leader>4 :<c-u>NotAffectedReason<CR>

let b:current_syntax = "cve"
" vim: ts=8 sw=2
