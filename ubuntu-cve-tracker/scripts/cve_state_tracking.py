#!/usr/bin/env python3
import yaml, sys, os
import cve_lib

def load_cve_yaml_file(filename):
        ''' loads in a yaml file keyed by cves '''

        # check if the file does not exist
        if not os.path.exists(filename):
                # touching file to create it
                with open(filename, 'w') as create_file:
                        pass

                # returning empty dict of cves
                return {}

        with open(filename, 'r') as inF:
                cves = yaml.safe_load(inF)

        # handling case of an empty snapshot file
        if cves == None:
                cves = {}

        return cves

def write_cve_yaml_file(filename, cve_d):
        ''' overwrites specified yaml file provided cve dict '''

        with open(filename, 'w') as outF:
                yaml.dump(cve_d, outF)

def get_cveinfo():
	''' returns a dict of cves and their corresponding data from $UCT '''

	active_cves, embargoed_cves = cve_lib.get_cve_list()

	table, priority, updated_cves, namemap, cveinfo = cve_lib.load_table(active_cves, embargoed_cves)

        # clearing out embargoed cves
	for cve in embargoed_cves:
                cveinfo.pop(cve)

	return cveinfo

def parse_cveinfo(cveinfo):
        ''' returns a dict of cves and their corresponding values (that we are interested in) '''

        cve_d = {}

        for cve in cveinfo:
                priority = cveinfo[cve]["Priority"][0].upper().strip()
                ubuntu_priority_reason = cveinfo[cve]["Priority"][1].strip()

                public_date = cveinfo[cve]["PublicDate"].strip()
                packages = cveinfo[cve]["pkgs"]

                cve_d[cve] = {"priority":priority, "severities":{}, "public_date":public_date, "packages":packages, "ubuntu_priority_reason":ubuntu_priority_reason}

                for entry in cveinfo[cve]["CVSS"]:
                        source = entry["source"].strip()
                        version = entry["vector"][:entry["vector"].index('/')].strip()
                        severity = entry["baseSeverity"].upper().strip()

                        cve_d[cve]["severities"][f"{source}:{version}"] = severity

        return cve_d
