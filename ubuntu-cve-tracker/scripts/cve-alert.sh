#!/bin/bash
# Copyright 2011-2020 Canonical, Ltd
# License: GPLv3
set -e

#
# Configuration
#
alert_threshold=10
alert_high_threshold=0
alert_community_threshold=0
alert_ignore="[[:blank:]]linux:|linux-lts-|linux-hwe|linux-ti-|linux-raspi|linux-snapdragon|linux-allwinner|linux-azure|linux-aws|linux-bluefield|linux-dell|linux-gcp|linux-gke|linux-ibm|linux-intel|linux-iot|linux-laptop|linux-lowlatency|linux-kvm|linux-nvidia|linux-oem|linux-oracle|linux-realtime|linux-riscv|linux-starfive|linux-xilinx-zynqmp|qtwebkit-source|qtwebkit-opensource-src|webkit:|webkitgtk|oxide-qt"
alert_high_ignore="$alert_ignore"
# important universe packages that we'd like to have up to date
# Currently none
alert_community=""

#
# Helpers
#
check_pending_overlay() {
    variant="$1"
    match=
    if [ "$variant" = "ubuntu-core" ]; then
        match="$variant"
    elif [ "$variant" = "ubuntu-touch" ]; then
        match="stable-phone-overlay"
    else
        echo "Invalid variant name '$variant'" >&2
        return 1
    fi

    err=
    pyexe="python"
    if command -v python3 >/dev/null ; then
        pyexe="python3"
    fi

    for rel in $(PYTHONPATH="${PYTHONPATH}${PYTHONPATH:+:}$(dirname "$0")" "$pyexe" -c 'import cve_lib ; print(" ".join(set(cve_lib.all_releases) - set(cve_lib.eol_releases)))') ; do
        if ! echo "$rel" | grep -q "$match" ; then
            continue
        fi

        # shellcheck disable=SC2001
        fn="./$(echo "$rel" | sed 's#/#-#g')-supported.txt"
        if [ -n "$UCT" ]; then
            fn="$UCT/$fn"
        fi
        if [ ! -f "$fn" ]; then
            echo "Could not find '$fn'" >&2
            return 1
        fi

        cve_packages_cmd=("./scripts/cve_packages" "-m" "-a" "--deferred-days=30" "-r" "$rel" "--only-pending" "$by_nvd_priority")
        out=$("${cve_packages_cmd[@]}" | grep '^[0-9]' | sort -n)

        if [ -n "$out" ]; then
            if [ -n "$rel" ]; then
                echo "Pending CVEs for '$rel' queued for next OTA update"
            fi
            echo ""
            echo "$out"
            echo ""
            err="yes"
        fi
    done
    if [ "$err" = "yes" ]; then
        return 1
    fi
}

check_output() {
    search=$1
    thresh=$2

    cve_packages_cmd=("./scripts/cve_packages" "-m" "-a" "--deferred-days=30" "--skip-pending-overlay" "$skip_pending" "$skip_overlays" "$skip_snaps" "$by_nvd_priority")
    if [ "$search" != "high|critical" ]; then
        cve_packages_cmd+=("$skip_devel")
    fi

    # could just remove "-m" if $search = "community" but this seem more
    # readable
    cve_packages_comm_cmd=("./scripts/cve_packages" "-a" "--deferred-days=30" "$skip_pending" "$skip_overlays" "$skip_snaps" "$skip_devel" "$by_nvd_priority")

    out=""
    if [ "$search" = "high|critical" ]; then
        # Only ignore specific high or critical packages in our list, even if only
        # in our devel release
        out=$("${cve_packages_cmd[@]}" | grep -Ev "($alert_high_ignore)" |grep '^[0-9]' | grep -E "$search" | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "medium or >5 low" ]; then
	# Show packages with a medium or higher as well as those with 5 or more
        # lows.
        out=$("${cve_packages_cmd[@]}" | grep -Ev "($alert_ignore)" | grep '^[0-9]' | grep -E "(([1-9]{1,}[0-9]| [5-9]) low | medium)" | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "all low" ]; then
	# Show packages with low or higher
        out=$("${cve_packages_cmd[@]}" | grep -Ev "($alert_ignore)" | grep '^[0-9]' | grep -E " low | medium" | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "heuristics" ]; then
        # Show all packages, including negligible
        out=$("${cve_packages_cmd[@]}" | grep -Ev "($alert_ignore)" | grep '^[0-9]' | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    elif [ "$search" = "community" ]; then
        if [ -z "$alert_community" ]; then
            return
        fi
        out=$("${cve_packages_comm_cmd[@]}" -a --deferred-days=30 | grep -E "($alert_community)" | grep -E '^([5-9][0-9]|[1-9]{1,}[0-9]{2,})[[:space:]]' | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    else
        out=$("${cve_packages_cmd[@]}" | grep -Ev "($alert_ignore)" | grep '^[0-9]' | grep -E "$search" | sort -n)
        if [ -z "$out" ]; then
            return
        fi
    fi

    total=$(echo "${out}" | wc -l)
    if [ "${total}" -gt "${thresh}" ]; then
        echo "WARNING: too many packages with open vulnerabilities! ($total > $thresh for '$search')"
        echo ""
        echo "$out"
        echo ""
        return 1
    fi
}

#
# Main
#
err=""

# These are special alert reports that can be run like so:
# cve-alert.sh ubuntu-core
# cve-alert.sh ubuntu-touch
if [ "$1" = "ubuntu-core" ] || [ "$1" = "ubuntu-touch" ]; then
    check_pending_overlay "$1" || exit 1
    exit 0
fi

# FIXME: these shouldn't be order dependent
skip_devel=
if [ "$1" = "--skip-devel" ] || [ "$1" = "-S" ]; then
    skip_devel="-S"
    shift
fi

skip_overlays=
if [ "$1" = "--skip-overlays" ] || [ "$1" = "-o" ]; then
    skip_overlays="--skip-overlays"
    shift
fi
skip_snaps=
if [ "$1" = "--skip-snaps" ] || [ "$1" = "-s" ]; then
    skip_snaps="--skip-snaps"
    shift
fi
skip_pending=
if [ "$1" = "--skip-pending" ] || [ "$1" = "-p" ]; then
    skip_pending="--skip-pending"
    shift
fi
all=
if [ "$1" = "--all" ] || [ "$1" = "-a" ]; then
    all=true
    shift
fi
all_low=
if [ "$1" = "--all-low" ] || [ "$1" = "-l" ]; then
    all_low=true
    shift
fi

by_nvd_priority=
if [ "$1" = "--nvd" ]; then
    by_nvd_priority="--nvd"
    shift
fi

if [ -n "$1" ]; then
    alert_threshold="$1"
    echo "Overriding alert_threshold to '$alert_threshold'"
    shift
fi


# high and higher
check_output 'high|critical' $alert_high_threshold || err="yes"

# medium and low
if [ "$all" = "true" ]; then
    check_output "heuristics" "$alert_threshold" || err="yes"
elif [ "$all_low" = "true" ]; then
    check_output "all low" "$alert_threshold" || err="yes"
else
    # medium or more than 5 low
    check_output "medium or >5 low" "$alert_threshold" || err="yes"
fi

# community
check_output "community" $alert_community_threshold || err="yes"

if [ "$err" = "yes" ]; then
    exit 1
fi
