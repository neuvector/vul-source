# To test this Makefile, just run "export TARGET=/path/to/output" before
# running "make" and output will be generated there. To test flavors output,
# also run "export SUPPORT_DB=/pat/to/json/support/db" and run "make".
#
# If you set the UCT and UCT_REVIEWED environment variables, then only the
# scripts from the UCT_REVIEWED directory will be used (using the data from the
# UCT directory).

SCRIPTS_RELDIR=/scripts
UCT_SCRIPTS=$(shell pwd)$(SCRIPTS_RELDIR)
ifneq ($(UCT_REVIEWED)$(SCRIPTS_RELDIR),$(SCRIPTS_RELDIR))
	UCT_SCRIPTS=$(UCT_REVIEWED)$(SCRIPTS_RELDIR)
endif
export SCRIPTS=$(UCT_SCRIPTS)
export ACTIVE=$(shell pwd)/active
PYTEST=pytest-3
PYTHON=python3
PYFLAKES=pyflakes3

all: cves pkgs tables

prep:
	rsync -a $(SCRIPTS)/html/top/. $(TARGET)/

cves: prep
	$(MAKE) -C active
	$(MAKE) -C retired
	$(MAKE) -C ignored

pkgs: prep
	# Always regenerate the pkgs makefile, the next call will sort out
	# what has or has not changed.
	$(SCRIPTS)/generate-pkgs-makefile.py > $(TARGET)/.pkgs-makefile
	$(MAKE) -f $(TARGET)/.pkgs-makefile

tables: prep
	if [ -e "$(SUPPORT_DB)" ]; then \
		$(SCRIPTS)/html-report -d $(TARGET) -D $(SUPPORT_DB) ; \
		$(SCRIPTS)/html-report -d $(TARGET) -S -D $(SUPPORT_DB) ; \
	else \
		$(SCRIPTS)/html-report -d $(TARGET) ; \
		$(SCRIPTS)/html-report -d $(TARGET) -S ; \
		$(SCRIPTS)/extra-reports $(TARGET) ; \
	fi \

.PHONY: prep cves pkgs tables

# this target is used for setting up the git tree in a developer's
# environment
dev_setup:
	# install git commit hooks in UCT AND UST. First verify pyflakes3 is installed in the system
	@if ! dpkg -l | grep pyflakes3 -c >>/dev/null; then \
		echo '*** pyflakes3 package is not installed. Please install it and run dev_setup again ***'; \
	else \
		# install git commit hooks in UCT repo \
		echo install -m 755 -b -S .backup scripts/git-hooks/pre-commit-wrapper .git/hooks/pre-commit ; \
		install -m 755 -b -S .backup scripts/git-hooks/pre-commit-wrapper .git/hooks/pre-commit ; \
		echo install -m 755 -b -S .backup scripts/git-hooks/pre-commit .git/hooks/pre-commit-syntax-check ; \
		install -m 755 -b -S .backup scripts/git-hooks/pre-commit .git/hooks/pre-commit-syntax-check ; \
		echo install -m 755 -b -S .backup scripts/git-hooks/pre-commit-pyflakes3 .git/hooks ; \
		install -m 755 -b -S .backup scripts/git-hooks/pre-commit-pyflakes3 .git/hooks ; \
		echo install -m 755 -b -S .backup scripts/git-hooks/pre-commit-emacs .git/hooks ; \
		install -m 755 -b -S .backup scripts/git-hooks/pre-commit-emacs .git/hooks ; \
		# install git prepare message hook; this is used to do a \
		# check-syntax run for merge commits, which the regular git \
		# commit hook mind-bogglingly does not get run on \
		echo install -m 755 -b -S .backup scripts/git-hooks/prepare-commit-msg .git/hooks ; \
		install -m 755 -b -S .backup scripts/git-hooks/prepare-commit-msg .git/hooks ; \
		# install git commit hooks in UST repo if configured \
		if [ -n "$${UST}" ] ; then \
			echo install -m 755 -b -S .backup scripts/git-hooks/pre-commit-pyflakes3 "$${UST}/.git/hooks/pre-commit" ; \
			install -m 755 -b -S .backup scripts/git-hooks/pre-commit-pyflakes3 "$${UST}/.git/hooks/pre-commit" ; \
		else \
		        echo '*** $$UST is not set, unable to install pre commit hooks into UST ***' ; \
		fi \
	fi
	#setup the launchpadlib helper tool symlink
	@if [ -n "$${UQT}" ] ; then \
		echo ln -sf  "$${UQT}/common/lpl_common.py" scripts/lpl_common.py ; \
		ln -sf  "$${UQT}/common/lpl_common.py" scripts/lpl_common.py ; \
	else \
	        echo '*** $$UQT is not set, unable to find location of lpl_common.py ***' ; \
	fi

syntax-shell:
	# run shellcheck on the specific types of shell scripts we have
	# this does not propagate the error code yet because we have a
	# a bunch of warnings, some of which because of how things are
	# used, just need to be silenced.
	find -type d \( -name cache -o -name active -o -name retired -o -name ignored -o -name nvd-database -o -name .git \) -prune   -o -exec file {} \+ | grep "Bourne-Again shell script" | cut -d ":" -f 1 | xargs shellcheck -s bash || true
	find -type d \( -name cache -o -name active -o -name retired -o -name ignored -o -name nvd-database -o -name .git \) -prune   -o -exec file {} \+ | grep -i "posix shell script" | cut -d ":" -f 1 | xargs shellcheck -s dash || true

syntax-python:
	# run pyflakes on the python scripts we have
	# this does not propagate the error code yet because there are
	# some scripts that need to be made python3 compliant and some
	# imports cleaned up
	find -type d \( -name cache -o -name active -o -name retired -o -name ignored -o -name nvd-database -o -name .git \) -prune -o -exec file {} \+  | grep "Python script" | cut -d ":" -f 1 | xargs $(PYFLAKES) || true

check-syntax-scripts: syntax-shell syntax-python

coverage-python:
	# because the coverage and check targets are phony, using normal
	# make dependencies results in check-python being run even when
	# the .coverage file already exists.
	[ -f .coverage ] || make check-python
	$(PYTHON) -m coverage html --dir coverage
	$(PYTHON) -m coverage xml -o coverage/uct-coverage.xml
	# jammy's version of python-coverage does not support lcov, so
	# don't fail on error
	-$(PYTHON) -m coverage lcov -o coverage/uct-coverage.lcov

.coverage: check-python

check-python:
	$(PYTEST) --cov=scripts --cov-branch \
		./scripts/test_convert_pickle.py \
		./scripts/test_cve_lib.py \
		./scripts/test_kernel_lib.py \
		./scripts/test_kernel_partition_usns.py \
		./scripts/test_kernel_pending_cves.py \
		./scripts/test_source_map.py \
		./scripts/test_sync_from_usns.py \
		./scripts/test_uct_config.py \
		./scripts/test_uct_cpes.py \
		./scripts/test_uct_suggestions.py \
		./scripts/test_usn_lib.py \
		./test/test_oval_lib_unit.py \
		./test/test_json_generation.py \
		./test/test_subproject_cve_creation.py

check: check-syntax-scripts check-python
	$(SCRIPTS)/check-syntax

clean:
	rm -f .coverage
	rm -rf coverage/

.PHONY: dev_setup check check-python coverage-python check-syntax-scripts \
syntax-shell syntax-python clean
