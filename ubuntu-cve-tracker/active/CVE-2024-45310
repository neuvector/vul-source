Candidate: CVE-2024-45310
PublicDate: 2024-09-03 19:15:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2024-45310
 https://www.openwall.com/lists/oss-security/2024/09/03/1
 https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv
 https://github.com/opencontainers/runc/pull/4359
Description:
 runc is a CLI tool for spawning and running containers according to the OCI
 specification. runc 1.1.13 and earlier, as well as 1.2.0-rc2 and earlier,
 can be tricked into creating empty files or directories in arbitrary
 locations in the host filesystem by sharing a volume between two containers
 and exploiting a race with `os.MkdirAll`. While this could be used to
 create empty files, existing files would not be truncated. An attacker must
 have the ability to start containers using some kind of custom volume
 configuration. Containers using user namespaces are still affected, but the
 scope of places an attacker can create inodes can be significantly reduced.
 Sufficiently strict LSM policies (SELinux/Apparmor) can also in principle
 block this attack -- we suspect the industry standard SELinux policy may
 restrict this attack's scope but the exact scope of protection hasn't been
 analysed. This is exploitable using runc directly as well as through Docker
 and Kubernetes. The issue is fixed in runc v1.1.14 and v1.2.0-rc3.
 
 Some workarounds are available. Using user namespaces restricts this attack
 fairly significantly such that the attacker can only create inodes in
 directories that the remapped root user/group has write access to. Unless
 the root user is remapped to an actual
 user on the host (such as with rootless containers that don't use
 `/etc/sub[ug]id`), this in practice means that an attacker would only be
 able to create inodes in world-writable directories. A strict enough
 SELinux or AppArmor policy could in principle also restrict the scope if a
 specific label is applied to the runc runtime, though neither the extent to
 which the standard existing policies block this attack nor what exact
 policies are needed to sufficiently restrict this attack have been
 thoroughly tested.
Ubuntu-Description:
Notes:
 sbeattie> src:runc-app provides the runc binaries, src:runc provides
 sbeattie> golang-github-opencontainers-runc-dev in older releases. See
 sbeattie> LP: #2022390 and LP: #2040460 for details.
Mitigation:
Bugs:
Priority: low
 Per upstream, the CVSS score for this is 3.6, low
Discovered-by: Rodrigo Campos Catelin and Alban Crequy
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N [3.6 LOW]

Patches_runc:
 upstream: https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e
 upstream: https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf
upstream_runc: released (1.1.14)
esm-apps/xenial_runc: needed
esm-apps/bionic_runc: needed
focal_runc: ignored (end of standard support, was needed)
esm-infra/focal_runc: needed
jammy_runc: needed
noble_runc: needed
esm-apps/noble_runc: needed
oracular_runc: ignored (end of life, was needed)
plucky_runc: not-affected (1.1.15+ds1-2ubuntu1)
devel_runc: not-affected (1.1.15+ds1-2ubuntu1)

Patches_runc-app:
upstream_runc-app: released (1.1.14)
focal_runc-app: ignored (end of standard support, was needed)
esm-apps/focal_runc-app: needed
jammy_runc-app: needed
esm-apps/jammy_runc-app: needed
noble_runc-app: needed
oracular_runc-app: ignored (end of life, was needed)
plucky_runc-app: not-affected (1.2.5-0ubuntu1)
devel_runc-app: not-affected (1.2.5-0ubuntu1)
