Candidate: CVE-2025-62493
PublicDate: 2025-10-17
References:
 https://www.cve.org/CVERecord?id=CVE-2025-62493
 https://issuetracker.google.com/434193024
 https://bellard.org/quickjs/Changelog
Description:
 A vulnerability exists in the QuickJS engine's BigInt string conversion
 logic (js_bigint_to_string1) due to an incorrect calculation of the
 required number of digits, which in turn leads to reading memory past the
 allocated BigInt structure.
 
   *  The function determines the number of characters (n_digits) needed for
 the string representation by calculating:
 
 $$ \\ \text{n\_digits} = (\text{n\_bits} + \text{log2\_radix} - 1) /
 \text{log2\_radix}$$
 
 $$$$This formula is off-by-one in certain edge cases when calculating the
 necessary memory limbs. For instance, a 127-bit BigInt using radix 32
 (where $\text{log2\_radix}=5$) is calculated to need $\text{n\_digits}=26$.
 
 
   *  The maximum number of bits actually stored is $\text{n\_bits}=127$,
 which requires only two 64-bit limbs ($\text{JS\_LIMB\_BITS}=64$).
 
 
   *  The conversion loop iterates $\text{n\_digits}=26$ times, attempting
 to read 5 bits in each iteration, totaling $26 \times 5 = 130$ bits.
 
 
   *  In the final iterations of the loop, the code attempts to read data
 that spans two limbs:
 
 C
 
 
 
 c = (r->tab[pos] >> shift) | (r->tab[pos + 1] << (JS_LIMB_BITS - shift));
 
 
 
 
 
 
 
 
 
   *  Since the BigInt was only allocated two limbs, the read operation for
 r->tab[pos + 1] becomes an Out-of-Bounds Read when pos points to the last
 valid limb (e.g., $pos=1$).
 
 
 This vulnerability allows an attacker to cause the engine to read and
 process data from the memory immediately following the BigInt buffer. This
 can lead to Information Disclosure of sensitive data stored on the heap
 adjacent to the BigInt object.
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 google: CVSS:4.0/AV:A/AC:H/AT:P/PR:L/UI:P/VC:H/VI:L/VA:L/SC:H/SI:L/SA:L [5.9 MEDIUM]

Patches_quickjs:
upstream_quickjs: needs-triage
jammy_quickjs: DNE
noble_quickjs: needs-triage
esm-apps/noble_quickjs: needs-triage
plucky_quickjs: needs-triage
questing_quickjs: needs-triage
devel_quickjs: needs-triage
