Candidate: CVE-2024-45337
PublicDate: 2024-12-12 02:02:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2024-45337
 https://github.com/golang/go/issues/70779
 https://go-review.googlesource.com/c/crypto/+/635315/
 https://groups.google.com/g/golang-announce/c/-nPEi39gI4Q/m/cGVPJCqdAQAJ
 http://www.openwall.com/lists/oss-security/2024/12/11/2
 https://github.com/golang/crypto/commit/b4f1988a35dee11ec3e05d6bf3e90b695fbd8909
 https://go.dev/cl/635315
 https://go.dev/issue/70779
 https://pkg.go.dev/vuln/GO-2024-3321
Description:
 Applications and libraries which misuse connection.serverAuthenticate (via
 callback field ServerConfig.PublicKeyCallback) may be susceptible to an
 authorization bypass. The documentation for ServerConfig.PublicKeyCallback
 says that "A call to this function does not guarantee that the key offered
 is in fact used to authenticate." Specifically, the SSH protocol allows
 clients to inquire about whether a public key is acceptable before proving
 control of the corresponding private key. PublicKeyCallback may be called
 with multiple keys, and the order in which the keys were provided cannot be
 used to infer which key the client successfully authenticated with, if any.
 Some applications, which store the key(s) passed to PublicKeyCallback (or
 derived information) and make security relevant determinations based on it
 once the connection is established, may make incorrect assumptions. For
 example, an attacker may send public keys A and B, and then authenticate
 with A. PublicKeyCallback would be called only twice, first with A and then
 with B. A vulnerable application may then make authorization decisions
 based on key B for which the attacker does not actually control the private
 key. Since this API is widely misused, as a partial mitigation
 golang.org/x/cry...@v0.31.0 enforces the property that, when successfully
 authenticating via public key, the last key passed to
 ServerConfig.PublicKeyCallback will be the key used to authenticate the
 connection. PublicKeyCallback will now be called multiple times with the
 same key, if necessary. Note that the client may still not control the last
 key passed to PublicKeyCallback if the connection is then authenticated
 with a different method, such as PasswordCallback,
 KeyboardInteractiveCallback, or NoClientAuth. Users should be using the
 Extensions field of the Permissions return value from the various
 authentication callbacks to record data associated with the authentication
 attempt instead of referencing external state. Once the connection is
 established the state corresponding to the successful authentication
 attempt can be retrieved via the ServerConn.Permissions field. Note that
 some third-party libraries misuse the Permissions type by sharing it across
 authentication attempts; users of third-party libraries should refer to the
 relevant projects for guidance.
Ubuntu-Description:
Notes:
 jdstrand> snapd contains an embedded copy of golang-go.crypto
 jdstrand> lxd in 18.04 LTS and earlier contains an embedded copy of
 jdstrand> golang-go.crypto
Mitigation:
Bugs:
 http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1089754
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 cisa-adp: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N [9.1 CRITICAL]

Patches_golang-go.crypto:
upstream_golang-go.crypto: needs-triage
esm-infra/xenial_golang-go.crypto: needs-triage
esm-apps/bionic_golang-go.crypto: needs-triage
focal_golang-go.crypto: ignored (end of standard support, was needs-triage)
esm-infra/focal_golang-go.crypto: DNE (focal was needs-triage)
esm-apps/focal_golang-go.crypto: needs-triage
jammy_golang-go.crypto: needs-triage
esm-apps/jammy_golang-go.crypto: needs-triage
noble_golang-go.crypto: needs-triage
esm-apps/noble_golang-go.crypto: needs-triage
oracular_golang-go.crypto: needs-triage
plucky_golang-go.crypto: needs-triage
devel_golang-go.crypto: needs-triage

Patches_snapd:
upstream_snapd: needs-triage
snap_snapd: needs-triage
esm-infra/xenial_snapd: not-affected (code not present)
esm-infra/bionic_snapd: not-affected (code not present)
focal_snapd: not-affected (code not present)
esm-infra/focal_snapd: not-affected (code not present)
jammy_snapd: not-affected (code not present)
noble_snapd: not-affected (code not present)
oracular_snapd: not-affected (code not present)
plucky_snapd: not-affected (code not present)
devel_snapd: not-affected (code not present)

Patches_lxd:
upstream_lxd: needs-triage
esm-infra/xenial_lxd: needs-triage
esm-infra/bionic_lxd: needs-triage
focal_lxd: not-affected (code-not-present)
esm-infra/focal_lxd: DNE (focal was not-affected [code-not-present])
esm-apps/focal_lxd: not-affected (code-not-present)
jammy_lxd: DNE
noble_lxd: DNE
oracular_lxd: DNE
plucky_lxd: DNE
devel_lxd: DNE
