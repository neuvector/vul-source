Candidate: CVE-2021-37701
PublicDate: 2021-08-31 17:15:00 UTC
References:
 https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc
 https://www.npmjs.com/package/tar
 https://www.cve.org/CVERecord?id=CVE-2021-37701
Description:
 The npm package "tar" (aka node-tar) before versions 4.4.16, 5.0.8, and
 6.1.7 has an arbitrary file creation/overwrite and arbitrary code execution
 vulnerability. node-tar aims to guarantee that any file whose location
 would be modified by a symbolic link is not extracted. This is, in part,
 achieved by ensuring that extracted directories are not symlinks.
 Additionally, in order to prevent unnecessary stat calls to determine
 whether a given path is a directory, paths are cached when directories are
 created. This logic was insufficient when extracting tar files that
 contained both a directory and a symlink with the same name as the
 directory, where the symlink and directory names in the archive entry used
 backslashes as a path separator on posix systems. The cache checking logic
 used both `\` and `/` characters as path separators, however `\` is a valid
 filename character on posix systems. By first creating a directory, and
 then replacing that directory with a symlink, it was thus possible to
 bypass node-tar symlink checks on directories, essentially allowing an
 untrusted tar file to symlink into an arbitrary location and subsequently
 extracting arbitrary files into that location, thus allowing arbitrary file
 creation and overwrite. Additionally, a similar confusion could arise on
 case-insensitive filesystems. If a tar archive contained a directory at
 `FOO`, followed by a symbolic link named `foo`, then on case-insensitive
 file systems, the creation of the symbolic link would remove the directory
 from the filesystem, but _not_ from the internal directory cache, as it
 would not be treated as a cache hit. A subsequent file entry within the
 `FOO` directory would then be placed in the target of the symbolic link,
 thinking that the directory had already been created. These issues were
 addressed in releases 4.4.16, 5.0.8 and 6.1.7. The v3 branch of node-tar
 has been deprecated and did not receive patches for these issues. If you
 are still using a v3 release we recommend you update to a more recent
 version of node-tar. If this is not possible, a workaround is available in
 the referenced GHSA-9r2w-394v-53qc.
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N [8.2 HIGH]
 nvd: CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H [8.6 HIGH]


Patches_node-tar:
upstream_node-tar: released (6.1.7+~cs11.3.10-1)
trusty_node-tar: ignored (end of standard support)
trusty/esm_node-tar: ignored (end of ESM support, was needs-triage)
esm-infra-legacy/trusty_node-tar: needs-triage
xenial_node-tar: ignored (end of standard support)
esm-apps/xenial_node-tar: needs-triage
bionic_node-tar: ignored (end of standard support, was needs-triage)
esm-apps/bionic_node-tar: needs-triage
focal_node-tar: needs-triage
esm-apps/focal_node-tar: needs-triage
hirsute_node-tar: ignored (end of life)
impish_node-tar: not-affected (6.1.7+~cs11.3.10-1)
jammy_node-tar: not-affected (6.1.7+~cs11.3.10-1)
esm-apps/jammy_node-tar: not-affected (6.1.7+~cs11.3.10-1)
kinetic_node-tar: not-affected (6.1.7+~cs11.3.10-1)
lunar_node-tar: not-affected (6.1.7+~cs11.3.10-1)
mantic_node-tar: not-affected (6.1.7+~cs11.3.10-1)
noble_node-tar: not-affected (6.1.7+~cs11.3.10-1)
esm-apps/noble_node-tar: not-affected (6.1.7+~cs11.3.10-1)
oracular_node-tar: not-affected (6.1.7+~cs11.3.10-1)
plucky_node-tar: not-affected (6.1.7+~cs11.3.10-1)
devel_node-tar: not-affected (6.1.7+~cs11.3.10-1)
