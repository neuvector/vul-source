Candidate: CVE-2022-36083
PublicDate: 2022-09-07 22:15:00 UTC
References:
 https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9
 https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d (v4.9.2)
 https://www.cve.org/CVERecord?id=CVE-2022-36083
Description:
 JOSE is "JSON Web Almost Everything" - JWA, JWS, JWE, JWT, JWK, JWKS with
 no dependencies using runtime's native crypto in Node.js, Browser,
 Cloudflare Workers, Electron, and Deno. The PBKDF2-based JWE key management
 algorithms expect a JOSE Header Parameter named `p2c` PBES2 Count, which
 determines how many PBKDF2 iterations must be executed in order to derive a
 CEK wrapping key. The purpose of this parameter is to intentionally slow
 down the key derivation function in order to make password brute-force and
 dictionary attacks more expensive. This makes the PBES2 algorithms
 unsuitable for situations where the JWE is coming from an untrusted source:
 an adversary can intentionally pick an extremely high PBES2 Count value,
 that will initiate a CPU-bound computation that may take an unreasonable
 amount of time to finish. Under certain conditions, it is possible to have
 the user's environment consume unreasonable amount of CPU time. The impact
 is limited only to users utilizing the JWE decryption APIs with symmetric
 secrets to decrypt JWEs from untrusted parties who do not limit the
 accepted JWE Key Management Algorithms (`alg` Header Parameter) using the
 `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or
 through other means. The `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2`
 releases limit the maximum PBKDF2 iteration count to `10000` by default. It
 is possible to adjust this limit with a newly introduced `maxPBES2Count`
 decryption option. If users are unable to upgrade their required library
 version, they have two options depending on whether they expect to receive
 JWEs using any of the three PBKDF2-based JWE key management algorithms.
 They can use the `keyManagementAlgorithms` decryption option to disable
 accepting PBKDF2 altogether, or they can inspect the JOSE Header prior to
 using the decryption API and limit the PBKDF2 iteration count (`p2c` Header
 Parameter).
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L [5.3 MEDIUM]
 nvd: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L [5.3 MEDIUM]

Patches_jose:
upstream_jose: needs-triage
trusty_jose: ignored (end of standard support)
xenial_jose: ignored (end of standard support)
bionic_jose: not-affected (code not present)
esm-apps/bionic_jose: not-affected (code not present)
focal_jose: not-affected (code not present)
esm-infra/focal_jose: DNE (focal was not-affected [code not present])
esm-apps/focal_jose: not-affected (code not present)
jammy_jose: not-affected (code not present)
esm-apps/jammy_jose: not-affected (code not present)
kinetic_jose: ignored (end of life, was needs-triage)
lunar_jose: ignored (end of life, was needs-triage)
mantic_jose: ignored (end of life, was needs-triage)
noble_jose: needs-triage
esm-apps/noble_jose: needs-triage
oracular_jose: needs-triage
plucky_jose: needs-triage
devel_jose: needs-triage

Patches_node-jose:
upstream_node-jose: released (4.9.2-1)
trusty_node-jose: ignored (end of standard support)
xenial_node-jose: ignored (end of standard support)
bionic_node-jose: DNE
focal_node-jose: DNE
esm-infra/focal_node-jose: DNE
jammy_node-jose: needed
esm-apps/jammy_node-jose: needed
kinetic_node-jose: not-affected (4.9.2-1)
lunar_node-jose: not-affected (4.9.2-1)
mantic_node-jose: not-affected (4.9.2-1)
noble_node-jose: not-affected (4.9.2-1)
esm-apps/noble_node-jose: not-affected (4.9.2-1)
oracular_node-jose: not-affected (4.9.2-1)
plucky_node-jose: not-affected (4.9.2-1)
devel_node-jose: not-affected (4.9.2-1)
