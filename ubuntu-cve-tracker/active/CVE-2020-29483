Candidate: CVE-2020-29483
PublicDate: 2020-12-15 18:15:00 UTC
References:
 https://xenbits.xen.org/xsa/advisory-325.html
 https://xenbits.xen.org/xsa/xsa325-4.14.patch
 https://www.cve.org/CVERecord?id=CVE-2020-29483
Description:
 An issue was discovered in Xen through 4.14.x. Xenstored and guests
 communicate via a shared memory page using a specific protocol. When a
 guest violates this protocol, xenstored will drop the connection to that
 guest. Unfortunately, this is done by just removing the guest from
 xenstored's internal management, resulting in the same actions as if the
 guest had been destroyed, including sending an @releaseDomain event.
 @releaseDomain events do not say that the guest has been removed. All
 watchers of this event must look at the states of all guests to find the
 guest that has been removed. When an @releaseDomain is generated due to a
 domain xenstored protocol violation, because the guest is still running,
 the watchers will not react. Later, when the guest is actually destroyed,
 xenstored will no longer have it stored in its internal data base, so no
 further @releaseDomain event will be sent. This can lead to a zombie
 domain; memory mappings of that guest's memory will not be removed, due to
 the missing event. This zombie domain will be cleaned up only after another
 domain is destroyed, as that will trigger another @releaseDomain event. If
 the device model of the guest that violated the Xenstore protocol is
 running in a stub-domain, a use-after-free case could happen in xenstored,
 after having removed the guest from its internal data base, possibly
 resulting in a crash of xenstored. A malicious guest can block resources of
 the host for a period after its own death. Guests with a stub domain device
 model can eventually crash xenstored, resulting in a more serious denial of
 service (the prevention of any further domain management operations). Only
 the C variant of Xenstore is affected; the Ocaml variant is not affected.
 Only HVM guests with a stubdom device model can cause a serious DoS.
Ubuntu-Description:
Notes:
 mdeslaur> hypervisor packages are in universe. For
 mdeslaur> issues in the hypervisor, add appropriate
 mdeslaur> tags to each section, ex:
 mdeslaur> Tags_xen: universe-binary
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 nvd: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:N/A:H [6.5 MEDIUM]

Patches_xen:
Tags_xen: universe-binary
upstream_xen: needs-triage
precise/esm_xen: DNE
trusty_xen: ignored (end of standard support)
trusty/esm_xen: DNE
esm-infra-legacy/trusty_xen: DNE
xenial_xen: ignored (end of standard support, was needed)
esm-infra/xenial_xen: needed
bionic_xen: ignored (end of standard support, was needed)
esm-infra/bionic_xen: needed
focal_xen: ignored (end of standard support, was needed)
esm-infra/focal_xen: DNE (focal was needed)
esm-apps/focal_xen: needed
groovy_xen: ignored (end of life)
hirsute_xen: ignored (end of life)
impish_xen: ignored (end of life)
jammy_xen: not-affected (4.11.4+57-g41a822c392-2)
esm-apps/jammy_xen: not-affected (4.11.4+57-g41a822c392-2)
kinetic_xen: not-affected (4.11.4+57-g41a822c392-2)
lunar_xen: not-affected (4.11.4+57-g41a822c392-2)
mantic_xen: not-affected (4.11.4+57-g41a822c392-2)
noble_xen: not-affected (4.11.4+57-g41a822c392-2)
esm-apps/noble_xen: not-affected (4.11.4+57-g41a822c392-2)
oracular_xen: not-affected (4.11.4+57-g41a822c392-2)
plucky_xen: not-affected (4.11.4+57-g41a822c392-2)
devel_xen: not-affected (4.11.4+57-g41a822c392-2)

