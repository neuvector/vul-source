Candidate: CVE-2021-21299
PublicDate: 2021-02-11 18:15:00 UTC
References:
 https://github.com/hyperium/hyper/security/advisories/GHSA-6hfq-h8hq-87mf
 https://rustsec.org/advisories/RUSTSEC-2021-0020.html
 https://crates.io/crates/hyper
 https://github.com/hyperium/hyper/commit/8f93123efef5c1361086688fe4f34c83c89cec02
 https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn
 https://www.cve.org/CVERecord?id=CVE-2021-21299
Description:
 hyper is an open-source HTTP library for Rust (crates.io). In hyper from
 version 0.12.0 and before versions 0.13.10 and 0.14.3 there is a
 vulnerability that can enable a request smuggling attack. The HTTP server
 code had a flaw that incorrectly understands some requests with multiple
 transfer-encoding headers to have a chunked payload, when it should have
 been rejected as illegal. This combined with an upstream HTTP proxy that
 understands the request payload boundary differently can result in "request
 smuggling" or "desync attacks". To determine if vulnerable, all these
 things must be true: 1) Using hyper as an HTTP server (the client is not
 affected), 2) Using HTTP/1.1 (HTTP/2 does not use transfer-encoding), 3)
 Using a vulnerable HTTP proxy upstream to hyper. If an upstream proxy
 correctly rejects the illegal transfer-encoding headers, the desync attack
 cannot succeed. If there is no proxy upstream of hyper, hyper cannot start
 the desync attack, as the client will repair the headers before forwarding.
 This is fixed in versions 0.14.3 and 0.13.10. As a workaround one can take
 the following options: 1) Reject requests that contain a
 `transfer-encoding` header, 2) Ensure any upstream proxy handles
 `transfer-encoding` correctly.
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: low
Discovered-by:
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N [4.8 MEDIUM]
 nvd: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H [8.1 HIGH]


Patches_rust-hyper:
upstream_rust-hyper: needs-triage
precise/esm_rust-hyper: DNE
trusty_rust-hyper: ignored (end of standard support)
trusty/esm_rust-hyper: DNE
esm-infra-legacy/trusty_rust-hyper: DNE
xenial_rust-hyper: DNE
bionic_rust-hyper: DNE
focal_rust-hyper: needs-triage
esm-apps/focal_rust-hyper: needs-triage
groovy_rust-hyper: DNE
hirsute_rust-hyper: ignored (end of life)
impish_rust-hyper: ignored (end of life)
jammy_rust-hyper: DNE
kinetic_rust-hyper: ignored (end of life, was needs-triage)
lunar_rust-hyper: ignored (end of life, was needs-triage)
mantic_rust-hyper: ignored (end of life, was needs-triage)
noble_rust-hyper: needs-triage
esm-apps/noble_rust-hyper: needs-triage
oracular_rust-hyper: needs-triage
plucky_rust-hyper: needs-triage
devel_rust-hyper: needs-triage
