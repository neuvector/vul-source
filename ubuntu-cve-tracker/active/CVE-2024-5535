PublicDateAtUSN: 2024-06-27 11:15:00 UTC
Candidate: CVE-2024-5535
PublicDate: 2024-06-27 11:15:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2024-5535
 https://openssl.org/news/secadv/20240627.txt
 https://ubuntu.com/security/notices/USN-6937-1
Description:
 Issue summary: Calling the OpenSSL API function SSL_select_next_proto with
 an
 empty supported client protocols buffer may cause a crash or memory
 contents to
 be sent to the peer.
 
 Impact summary: A buffer overread can have a range of potential
 consequences
 such as unexpected application beahviour or a crash. In particular this
 issue
 could result in up to 255 bytes of arbitrary private data from memory being
 sent
 to the peer leading to a loss of confidentiality. However, only
 applications
 that directly call the SSL_select_next_proto function with a 0 length list
 of
 supported client protocols are affected by this issue. This would normally
 never
 be a valid scenario and is typically not under attacker control but may
 occur by
 accident in the case of a configuration or programming error in the calling
 application.
 
 The OpenSSL API function SSL_select_next_proto is typically used by TLS
 applications that support ALPN (Application Layer Protocol Negotiation) or
 NPN
 (Next Protocol Negotiation). NPN is older, was never standardised and
 is deprecated in favour of ALPN. We believe that ALPN is significantly more
 widely deployed than NPN. The SSL_select_next_proto function accepts a list
 of
 protocols from the server and a list of protocols from the client and
 returns
 the first protocol that appears in the server list that also appears in the
 client list. In the case of no overlap between the two lists it returns the
 first item in the client list. In either case it will signal whether an
 overlap
 between the two lists was found. In the case where SSL_select_next_proto is
 called with a zero length client list it fails to notice this condition and
 returns the memory immediately following the client list pointer (and
 reports
 that there was no overlap in the lists).
 
 This function is typically called from a server side application callback
 for
 ALPN or a client side application callback for NPN. In the case of ALPN the
 list
 of protocols supplied by the client is guaranteed by libssl to never be
 zero in
 length. The list of server protocols comes from the application and should
 never
 normally be expected to be of zero length. In this case if the
 SSL_select_next_proto function has been called as expected (with the list
 supplied by the client passed in the client/client_len parameters), then
 the
 application will not be vulnerable to this issue. If the application has
 accidentally been configured with a zero length server list, and has
 accidentally passed that zero length server list in the client/client_len
 parameters, and has additionally failed to correctly handle a "no overlap"
 response (which would normally result in a handshake failure in ALPN) then
 it
 will be vulnerable to this problem.
 
 In the case of NPN, the protocol permits the client to opportunistically
 select
 a protocol when there is no overlap. OpenSSL returns the first client
 protocol
 in the no overlap case in support of this. The list of client protocols
 comes
 from the application and should never normally be expected to be of zero
 length.
 However if the SSL_select_next_proto function is accidentally called with a
 client_len of 0 then an invalid memory pointer will be returned instead. If
 the
 application uses this output as the opportunistic protocol then the loss of
 confidentiality will occur.
 
 This issue has been assessed as Low severity because applications are most
 likely to be vulnerable if they are using NPN instead of ALPN - but NPN is
 not
 widely used. It also requires an application configuration or programming
 error.
 Finally, this issue would not typically be under attacker control making
 active
 exploitation unlikely.
 
 The FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.
 
 Due to the low severity of this issue we are not issuing new releases of
 OpenSSL at this time. The fix will be included in the next releases when
 they
 become available.
Ubuntu-Description:
Notes:
 mdeslaur> This affects all 3.x versions, 1.1.1, and 1.0.2
Mitigation:
Bugs:
Priority: low
 OpenSSL developers have rated this issue has being low severity
Discovered-by: Joseph Birr-Pixton
Assigned-to:
CVSS:
 cisa-adp: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H [9.1 CRITICAL]

Patches_openssl:
 upstream: https://github.com/openssl/openssl/commit/cf6f91f6121f4db167405db2f0de410a456f260c (3.0.x)
 upstream: https://github.com/openssl/openssl/commit/99fb785a5f85315b95288921a321a935ea29a51e (3.2.x)
upstream_openssl: released (3.2.3)
trusty/esm_openssl: ignored (end of ESM support, was needs-triage)
esm-infra-legacy/trusty_openssl: needs-triage
esm-infra/xenial_openssl: needs-triage
fips-updates/xenial_openssl: needs-triage
fips/xenial_openssl: needs-triage
esm-infra/bionic_openssl: needs-triage
fips-updates/bionic_openssl: needs-triage
fips/bionic_openssl: needs-triage
focal_openssl: released (1.1.1f-1ubuntu2.23)
esm-infra/focal_openssl: not-affected (1.1.1f-1ubuntu2.23)
fips-updates/focal_openssl: released (1.1.1f-1ubuntu2.fips.23)
fips/focal_openssl: needed
jammy_openssl: released (3.0.2-0ubuntu1.17)
fips-preview/jammy_openssl: needed
fips-updates/jammy_openssl: released (3.0.2-0ubuntu1.17+Fips1)
mantic_openssl: ignored (end of life, was needs-triage)
noble_openssl: released (3.0.13-0ubuntu3.2)
oracular_openssl: released (3.2.2-1ubuntu2)
plucky_openssl: released (3.2.2-1ubuntu2)
devel_openssl: released (3.2.2-1ubuntu2)

Patches_openssl1.0:
upstream_openssl1.0: needs-triage
esm-infra/bionic_openssl1.0: needs-triage
focal_openssl1.0: DNE
esm-infra/focal_openssl1.0: DNE
jammy_openssl1.0: DNE
mantic_openssl1.0: DNE
noble_openssl1.0: DNE
oracular_openssl1.0: DNE
plucky_openssl1.0: DNE
devel_openssl1.0: DNE

Patches_nodejs:
upstream_nodejs: needs-triage
trusty/esm_nodejs: not-affected (uses system openssl)
esm-infra-legacy/trusty_nodejs: not-affected (uses system openssl)
esm-apps/xenial_nodejs: needs-triage
esm-apps/bionic_nodejs: needs-triage
focal_nodejs: not-affected (uses system openssl)
esm-apps/focal_nodejs: not-affected (uses system openssl)
jammy_nodejs: needed
esm-apps/jammy_nodejs: needs-triage
mantic_nodejs: not-affected (uses system openssl)
noble_nodejs: not-affected (uses system openssl)
esm-apps/noble_nodejs: not-affected (uses system openssl)
oracular_nodejs: not-affected (uses system openssl)
plucky_nodejs: not-affected (uses system openssl)
devel_nodejs: not-affected (uses system openssl)

Patches_edk2:
upstream_edk2: needs-triage
esm-apps/xenial_edk2: needs-triage
esm-apps/bionic_edk2: needs-triage
focal_edk2: ignored (end of standard support, was needs-triage)
esm-infra/focal_edk2: needs-triage
jammy_edk2: needs-triage
mantic_edk2: ignored (end of life, was needs-triage)
noble_edk2: needs-triage
oracular_edk2: ignored (end of life, was needs-triage)
plucky_edk2: needs-triage
devel_edk2: needs-triage
