Candidate: CVE-2023-35947
PublicDate: 2023-06-30 21:15:00 UTC
References:
 https://github.com/gradle/gradle/security/advisories/GHSA-84mw-qh6q-v842
 https://github.com/gradle/gradle/commit/1096b309520a8c315e3b6109a6526de4eabcb879 (v8.2.0-RC3)
 https://github.com/gradle/gradle/commit/2e5c34d57d0c0b7f0e8b039a192b91e5c8249d91 (v8.2.0-RC3)
 https://github.com/gradle/gradle/commit/1096b309520a8c315e3b6109a6526de4eabcb879
 https://github.com/gradle/gradle/commit/2e5c34d57d0c0b7f0e8b039a192b91e5c8249d91
 https://www.cve.org/CVERecord?id=CVE-2023-35947
Description:
 Gradle is a build tool with a focus on build automation and support for
 multi-language development. In affected versions when unpacking Tar
 archives, Gradle did not check that files could be written outside of the
 unpack location. This could lead to important files being overwritten
 anywhere the Gradle process has write permissions. For a build reading Tar
 entries from a Tar archive, this issue could allow Gradle to disclose
 information from sensitive files through an arbitrary file read. To exploit
 this behavior, an attacker needs to either control the source of an archive
 already used by the build or modify the build to interact with a malicious
 archive. It is unlikely that this would go unnoticed. A fix has been
 released in Gradle 7.6.2 and 8.2 to protect against this vulnerability.
 Starting from these versions, Gradle will refuse to handle Tar archives
 which contain path traversal elements in a Tar entry name. Users are
 advised to upgrade. There are no known workarounds for this vulnerability.
 ### Impact This is a path traversal vulnerability when Gradle deals with
 Tar archives, often referenced as TarSlip, a variant of ZipSlip. * When
 unpacking Tar archives, Gradle did not check that files could be written
 outside of the unpack location. This could lead to important files being
 overwritten anywhere the Gradle process has write permissions. * For a
 build reading Tar entries from a Tar archive, this issue could allow Gradle
 to disclose information from sensitive files through an arbitrary file
 read. To exploit this behavior, an attacker needs to either control the
 source of an archive already used by the build or modify the build to
 interact with a malicious archive. It is unlikely that this would go
 unnoticed. Gradle uses Tar archives for its [Build
 Cache](https://docs.gradle.org/current/userguide/build_cache.html). These
 archives are safe when created by Gradle. But if an attacker had control of
 a remote build cache server, they could inject malicious build cache
 entries that leverage this vulnerability. This attack vector could also be
 exploited if a man-in-the-middle can be performed between the remote cache
 and the build. ### Patches A fix has been released in Gradle 7.6.2 and 8.2
 to protect against this vulnerability. Starting from these versions, Gradle
 will refuse to handle Tar archives which contain path traversal elements in
 a Tar entry name. It is recommended that users upgrade to a patched
 version. ### Workarounds There is no workaround. * If your build deals with
 Tar archives that you do not fully trust, you need to inspect them to
 confirm they do not attempt to leverage this vulnerability. * If you use
 the Gradle remote build cache, make sure only trusted parties have write
 access to it and that connections to the remote cache are properly secured.
 ### References * [CWE-22: Improper Limitation of a Pathname to a Restricted
 Directory ('Path
 Traversal')](https://cwe.mitre.org/data/definitions/22.html) * [Gradle
 Build Cache](https://docs.gradle.org/current/userguide/build_cache.html) *
 [ZipSlip](https://security.snyk.io/research/zip-slip-vulnerability)
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L [6.9 MEDIUM]
 nvd: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H [8.1 HIGH]

Patches_gradle:
upstream_gradle: needs-triage
trusty_gradle: ignored (end of standard support)
xenial_gradle: ignored (end of standard support)
esm-apps/xenial_gradle: needs-triage
bionic_gradle: ignored (end of standard support)
esm-apps/bionic_gradle: needs-triage
focal_gradle: ignored (end of standard support, was needs-triage)
esm-apps/focal_gradle: needs-triage
jammy_gradle: needs-triage
esm-apps/jammy_gradle: needs-triage
kinetic_gradle: ignored (end of life, was needs-triage)
lunar_gradle: ignored (end of life, was needs-triage)
mantic_gradle: ignored (end of life, was needs-triage)
noble_gradle: needs-triage
esm-apps/noble_gradle: needs-triage
oracular_gradle: needs-triage
plucky_gradle: needs-triage
devel_gradle: needs-triage
