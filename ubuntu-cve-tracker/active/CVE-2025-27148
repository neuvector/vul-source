Candidate: CVE-2025-27148
PublicDate: 2025-02-25 21:15:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2025-27148
 https://en.wikipedia.org/wiki/Fstab#Options_common_to_all_filesystems
 https://en.wikipedia.org/wiki/Sticky_bit
 https://github.com/gradle/gradle/pull/32025
 https://github.com/gradle/gradle/security/advisories/GHSA-465q-w4mf-4f4r
 https://github.com/gradle/gradle/security/advisories/GHSA-89qm-pxvm-p336
 https://github.com/gradle/native-platform/blob/574dfe8d9fb546c990436468d617ab81c140871d/native-platform/src/main/java/net/rubygrapefruit/platform/internal/NativeLibraryLocator.java#L68-L78
 https://github.com/gradle/native-platform/pull/353
 https://github.com/gradle/native-platform/security/advisories/GHSA-2xxp-vw2f-p3x8
Description:
 Gradle is a build automation tool, and its native-platform tool provides
 Java bindings for native APIs. On Unix-like systems, the system temporary
 directory can be created with open permissions that allow multiple users to
 create and delete files within it. This library initialization could be
 vulnerable to a local privilege escalation from an attacker quickly
 deleting and recreating files in the system temporary directory. Gradle
 builds that rely on versions of net.rubygrapefruit:native-platform prior to
 0.22-milestone-28 could be vulnerable to a local privilege escalation from
 an attacker quickly deleting and recreating files in the system temporary
 directory.
 
 In net.rubygrapefruit:native-platform prior to version 0.22-milestone-28,
 if the `Native.get(Class<>)` method was called, without calling
 `Native.init(File)` first, with a non-`null` argument used as working file
 path, then the library would initialize itself using the system temporary
 directory and NativeLibraryLocator.java lines 68 through 78. Version
 0.22-milestone-28 has been released with changes that fix the problem.
 Initialization is now mandatory and no longer uses the system temporary
 directory, unless such a path is passed for initialization. The only
 workaround for affected versions is to make sure to do a proper
 initialization, using a location that is safe.
 
 Gradle 8.12, only that exact version, had codepaths where the
 initialization of the underlying native integration library took a default
 path, relying on copying the binaries to the system temporary directory.
 Any execution of Gradle exposed this exploit. Users of Windows or modern
 versions of macOS are not vulnerable, nor are users of a Unix-like
 operating system with the "sticky" bit set or `noexec` on their system
 temporary directory vulnerable. This problem was fixed in Gradle 8.12.1.
 Gradle 8.13 release also upgrades to a version of the native library that
 no longer has that bug. Some workarounds are available. On Unix-like
 operating systems, ensure that the "sticky" bit is set. This only allows
 the original user (or root) to delete a file. Mounting `/tmp` as `noexec`
 will prevent Gradle 8.12 from starting. Those who are are unable to change
 the permissions of the system temporary directory can move the Java
 temporary directory by setting the System Property java.io.tmpdir. The new
 path needs to limit permissions to the build user only.
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 github: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H [8.8 HIGH]

Patches_gradle:
upstream_gradle: needs-triage
esm-apps/xenial_gradle: needs-triage
esm-apps/bionic_gradle: needs-triage
focal_gradle: ignored (end of standard support, was needs-triage)
esm-apps/focal_gradle: needs-triage
jammy_gradle: needs-triage
esm-apps/jammy_gradle: needs-triage
noble_gradle: needs-triage
esm-apps/noble_gradle: needs-triage
oracular_gradle: ignored (end of life, was needs-triage)
plucky_gradle: needs-triage
devel_gradle: needs-triage
