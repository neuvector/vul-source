Candidate: CVE-2025-62496
PublicDate: 2025-10-17
References:
 https://www.cve.org/CVERecord?id=CVE-2025-62496
 https://issuetracker.google.com/434193016
 https://bellard.org/quickjs/Changelog
Description:
 A vulnerability exists in the QuickJS engine's BigInt string parsing logic
 (js_bigint_from_string) when attempting to create a BigInt from a string
 with an excessively large number of digits.
 
 The function calculates the necessary number of bits (n_bits) required to
 store the BigInt using the formula:
 
 $$\text{n\_bits} = (\text{n\_digits} \times 27 + 7) / 8 \quad (\text{for
 radix 10})$$
 
   *  For large input strings (e.g., $79,536,432$ digits or more for base
 10), the intermediate calculation $(\text{n\_digits} \times 27 + 7)$
 exceeds the maximum value of a standard signed 32-bit integer, resulting in
 an Integer Overflow.
 
 
   *  The resulting n_bits value becomes unexpectedly small or even negative
 due to this wrap-around.
 
 
   *  This flawed n_bits is then used to compute n_limbs, the number of
 memory "limbs" needed for the BigInt object. Since n_bits is too small, the
 calculated n_limbs is also significantly underestimated.
 
 
   *  The function proceeds to allocate a JSBigInt object using this
 underestimated n_limbs.
 
 
   *  When the function later attempts to write the actual BigInt data into
 the allocated object, the small buffer size is quickly exceeded, leading to
 a Heap Out-of-Bounds Write as data is written past the end of the allocated
 r->tab array.
Ubuntu-Description:
Notes:
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 google: CVSS:4.0/AV:A/AC:H/AT:P/PR:L/UI:P/VC:H/VI:H/VA:L/SC:H/SI:H/SA:L [7.1 HIGH]

Patches_quickjs:
upstream_quickjs: needs-triage
jammy_quickjs: DNE
noble_quickjs: needs-triage
esm-apps/noble_quickjs: needs-triage
plucky_quickjs: needs-triage
questing_quickjs: needs-triage
devel_quickjs: needs-triage
