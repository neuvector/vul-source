PublicDateAtUSN: 2024-03-20 21:15:00 UTC
Candidate: CVE-2024-29018
PublicDate: 2024-03-20 21:15:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2024-29018
 https://github.com/moby/moby/security/advisories/GHSA-mq39-4gv4-mvpx
 https://github.com/moby/moby/pull/46609
 https://ubuntu.com/security/notices/USN-7161-1
 https://ubuntu.com/security/notices/USN-7161-2
Description:
 Moby is an open source container framework that is a key component of
 Docker Engine, Docker Desktop, and other distributions of container tooling
 or runtimes. Moby's networking implementation allows for many networks,
 each with their own IP address range and gateway, to be defined. This
 feature is frequently referred to as custom networks, as each network can
 have a different driver, set of parameters and thus behaviors. When
 creating a network, the `--internal` flag is used to designate a network as
 _internal_. The `internal` attribute in a docker-compose.yml file may also
 be used to mark a network _internal_, and other API clients may specify the
 `internal` parameter as well. When containers with networking are created,
 they are assigned unique network interfaces and IP addresses. The host
 serves as a router for non-internal networks, with a gateway IP that
 provides SNAT/DNAT to/from container IPs. Containers on an internal network
 may communicate between each other, but are precluded from communicating
 with any networks the host has access to (LAN or WAN) as no default route
 is configured, and firewall rules are set up to drop all outgoing traffic.
 Communication with the gateway IP address (and thus appropriately
 configured host services) is possible, and the host may communicate with
 any container IP directly. In addition to configuring the Linux kernel's
 various networking features to enable container networking, `dockerd`
 directly provides some services to container networks. Principal among
 these is serving as a resolver, enabling service discovery, and resolution
 of names from an upstream resolver. When a DNS request for a name that does
 not correspond to a container is received, the request is forwarded to the
 configured upstream resolver. This request is made from the container's
 network namespace: the level of access and routing of traffic is the same
 as if the request was made by the container itself. As a consequence of
 this design, containers solely attached to an internal network will be
 unable to resolve names using the upstream resolver, as the container
 itself is unable to communicate with that nameserver. Only the names of
 containers also attached to the internal network are able to be resolved.
 Many systems run a local forwarding DNS resolver. As the host and any
 containers have separate loopback devices, a consequence of the design
 described above is that containers are unable to resolve names from the
 host's configured resolver, as they cannot reach these addresses on the
 host loopback device. To bridge this gap, and to allow containers to
 properly resolve names even when a local forwarding resolver is used on a
 loopback address, `dockerd` detects this scenario and instead forward DNS
 requests from the host namework namespace. The loopback resolver then
 forwards the requests to its configured upstream resolvers, as expected.
 Because `dockerd` forwards DNS requests to the host loopback device,
 bypassing the container network namespace's normal routing semantics
 entirely, internal networks can unexpectedly forward DNS requests to an
 external nameserver. By registering a domain for which they control the
 authoritative nameservers, an attacker could arrange for a compromised
 container to exfiltrate data by encoding it in DNS queries that will
 eventually be answered by their nameservers. Docker Desktop is not
 affected, as Docker Desktop always runs an internal resolver on a RFC 1918
 address. Moby releases 26.0.0, 25.0.4, and 23.0.11 are patched to prevent
 forwarding any DNS requests from internal networks. As a workaround, run
 containers intended to be solely attached to internal networks with a
 custom upstream address, which will force all upstream DNS queries to be
 resolved from the container's network namespace.
Ubuntu-Description:
Notes:
 alexmurray> Traditionally the docker.io source package contained both the
 alexmurray> library and docker application. However, in releases that
 alexmurray> contain the
 alexmurray> docker.io-app source package, the docker.io source package
 alexmurray> contains only
 alexmurray> the library whilst the docker application itself is contained
 alexmurray> in the
 alexmurray> docker.io-app package.
 sbeattie> docker packages contain an embedded copy of github:moby/buildkit
 vyomydv> docker.io-app for noble is fixed in 26.1.3-0ubuntu1~24.04.1 
 vyomydv> -updates pocket.  
Mitigation:
Bugs:
 http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1068460
Priority: medium
Discovered-by: Yair Zak
Assigned-to: hlibk
CVSS:
 nvd: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N [7.5 HIGH]

Patches_docker.io:
upstream_docker.io: needs-triage
esm-infra/xenial_docker.io: released (18.09.7-0ubuntu1~16.04.9+esm2)
esm-apps/bionic_docker.io: released (20.10.21-0ubuntu1~18.04.3+esm2)
focal_docker.io: ignored (dev package, not the application)
esm-apps/focal_docker.io: ignored (dev package, not the application)
jammy_docker.io: ignored (dev package, not the application)
esm-apps/jammy_docker.io: ignored (dev package, not the application)
noble_docker.io: ignored (dev package, not the application)
esm-apps/noble_docker.io: ignored (dev package, not the application)
oracular_docker.io: not-affected (26.1.4+dfsg2-1ubuntu1)
devel_docker.io: not-affected (26.1.4+dfsg2-1ubuntu1)

Patches_docker.io-app:
upstream_docker.io-app: needs-triage
focal_docker.io-app: needed
esm-apps/focal_docker.io-app: released (26.1.3-0ubuntu1~20.04.1+esm1)
jammy_docker.io-app: needed
esm-apps/jammy_docker.io-app: released (26.1.3-0ubuntu1~22.04.1+esm1)
noble_docker.io-app: needed
esm-apps/noble_docker.io-app: released (26.1.3-0ubuntu1~24.04.1+esm1)
oracular_docker.io-app: not-affected (26.1.3-0ubuntu1)
devel_docker.io-app: not-affected (26.1.3-0ubuntu1)
