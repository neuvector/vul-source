Candidate: CVE-2025-59734
PublicDate: 2025-10-06 08:15:00 UTC
References:
 https://www.cve.org/CVERecord?id=CVE-2025-59734
 https://issuetracker.google.com/issues/440183164
Description:
 It is possible to cause an use-after-free write in SANM decoding with a
 carefully crafted animation using subversion <2.
 
 When a STOR chunk is present, a subsequent FOBJ chunk will be saved in
 ctx->stored_frame. Stored frames can later be referenced by FTCH chunks.
 For files using subversion < 2, the undecoded frame is stored, and decoded
 again when the FTCH chunks are parsed. However, in process_frame_obj if the
 frame has an invalid size, there’s an early return, with a value of 0. 
 
 This causes the code in decode_frame to still store the raw frame buffer
 into ctx->stored_frame. Leaving ctx->has_dimensions set to false.
 
 A subsequent chunk with type FTCH would call process_ftch and decode that
 frame obj again, adding to the top/left values and calling
 process_frame_obj again.
 Given that we never set ctx->have_dimensions before, this time we set the
 dimensions, calling init_buffers, which can reallocate the buffer in
 ctx->stored_frame, freeing the previous one. However, the
 GetByteContext object gb still holds a reference to the old buffer.
 
 
 
 
 Finally, when the code tries to decode the frame, codecs that accept a
 GetByteContext as a parameter will trigger a use-after-free read when using
 gb.
 
 GetByteContext is only used for reading bytes, so at most one could read
 invalid data. There are no heap allocations between the free and when the
 object is accessed. However, upon returning to process_ftch, the code
 restores the original values for top/left in stored_frame, writing 4 bytes
 to the freed data at offset 6, potentially corrupting the allocator’s
 metadata.
 
 This issue can be triggered just by probing whether a file has the sanm
 format.
 
 
 
 
 
 
 
 We recommend upgrading to version 8.0 or beyond.
Ubuntu-Description:
Notes:
 rodrigo-zaiden> Google Big Sleep identifier: BIGSLEEP-440183164
Mitigation:
Bugs:
Priority: medium
Discovered-by:
Assigned-to:
CVSS:
 google: CVSS:4.0/AV:A/AC:H/AT:N/PR:N/UI:P/VC:H/VI:H/VA:N/SC:H/SI:H/SA:N [8.7 HIGH]

Patches_ffmpeg:
 upstream: https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/d311382c38df9c2237b33a9e8e860a5da7d2895d
 upstream: https://git.ffmpeg.org/gitweb/ffmpeg.git/commit/c41a70b6bb79707e1e3a4b0e31950cd986b9f50e
upstream_ffmpeg: needs-triage
esm-apps/xenial_ffmpeg: needs-triage
esm-apps/bionic_ffmpeg: needs-triage
esm-apps/focal_ffmpeg: needs-triage
jammy_ffmpeg: needs-triage
esm-apps/jammy_ffmpeg: needs-triage
noble_ffmpeg: needs-triage
esm-apps/noble_ffmpeg: needs-triage
plucky_ffmpeg: needs-triage
questing_ffmpeg: needs-triage
devel_ffmpeg: needs-triage

Patches_libav:
upstream_libav: needs-triage
esm-infra-legacy/trusty_libav: needs-triage
jammy_libav: DNE
noble_libav: DNE
plucky_libav: DNE
questing_libav: DNE
devel_libav: DNE
